[
["instructions.html", "ACT Paper 1 Instructions", " ACT Paper Darlan Conterno Minussi Last compiled on 17 March, 2021 1 Instructions This repository contains the scripts used for in the manuscript: Breast Tumors Maintain a Reservoir of Subclonal Diversity During Expansion Scripts are provided in the format of a package to reproduce paper figures. Scripts are available in the folder R. Processed datasets canâ€™t be deposited at this repository due to IRB protocol. Raw datasets are deposited under BioProject PRJNA629885. Please contact the corresponding author for processed datasets. "],
["technical-properties.html", "2 Technical properties 2.1 Breadth of coverage 2.2 Overdispersion", " 2 Technical properties 2.1 Breadth of coverage Code to generate *.covhist files. covhist files are included in the extdata/covhist/ directory. For ACT, 100 cells were sampled from each dataset. source(&quot;R/setup.R&quot;) source(&quot;R/calc_coverage.R&quot;) source(&quot;R/overdispersion.R&quot;) &gt; headers_commands.sh &gt; reads_commands.sh &gt; delete_commands.sh &gt; sort_commands.sh &gt; genomecoveragebed_commands.sh &gt; mark_duplicates_commands.sh for INBAM in /PATH/TO/BAM/FILES/*.sort.bam do INFILEBASE=`basename $INBAM` INSAMPLEBASE=${INFILEBASE%.sort.bam} COVHISTFILE=${INSAMPLEBASE}.covhist.txt OUTBAM=$INSAMPLEBASE.sorted.bam INSAMPLEBASE_MD=`basename -s .sort.bam $INFILEBASE` OUTBAM_MD=$INSAMPLEBASE # marking duplicates touch $OUTBAM.txt printf &quot;%s\\n&quot; &quot;java -XX:ParallelGCThreads=4 -Xmx150g -jar picard.jar MarkDuplicates I=$INFILEBASE O=$OUTBAM_MD.marked.sort.bam M=$OUTBAM_MD.marked.sort.bam.txt VALIDATION_STRINGENCY=SILENT AS=true REMOVE_DUPLICATES=true MAX_RECORDS_IN_RAM=10000000 TMP_DIR=tmp&quot; &gt;&gt; mark_duplicates_commands.sh # Downsampling # Save headers, which will not be included when downsampling printf &quot;%s\\n&quot; &quot;samtools view $INSAMPLEBASE.marked.sort.bam -H &gt; $INSAMPLEBASE.sam&quot; &gt;&gt; headers_commands.sh # Downsample by randomly selecting a subset of rows besides the header, and # appending them to the header # Use the file itself as the seed for the random number generator printf &quot;%s\\n&quot; &quot;samtools view $INSAMPLEBASE.marked.sort.bam | shuf -n 800000 --random-source=$INSAMPLEBASE.marked.sort.bam &gt;&gt; $INSAMPLEBASE.sam&quot; &gt;&gt; reads_commands.sh # Sort the downsampled SAM file printf &quot;%s\\n&quot; &quot;samtools sort -o $OUTBAM $INSAMPLEBASE.sam&quot; &gt;&gt; sort_commands.sh # Delete the unsorted SAM files printf &quot;%s\\n&quot; &quot;rm $INSAMPLEBASE.sam&quot; &gt;&gt; delete_commands.sh # Calculate coverage maximum read size of 50 to all reads printf &quot;genomeCoverageBed -ibam $OUTBAM -fs 50 -g genomes/human.hg19.genome &gt; $COVHISTFILE\\n&quot; &gt;&gt; genomecoveragebed_commands.sh done parallel --jobs 30 &lt; mark_duplicates_commands.sh parallel --jobs 70 &lt; headers_commands.sh parallel --jobs 70 &lt; reads_commands.sh parallel --jobs 70 &lt; sort_commands.sh parallel --jobs 70 &lt; delete_commands.sh parallel --jobs 70 &lt; genomecoveragebed_commands.sh tn1_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN1/&quot;)) %&gt;% mutate(sample = &quot;TN1&quot;, tech = &quot;ACT&quot;, cellname = str_replace(cellname, &quot;TN28&quot;, &quot;TN1&quot;)) tn2_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN2/&quot;)) %&gt;% mutate(sample = &quot;TN2&quot;, tech = &quot;ACT&quot;, cellname = str_replace(cellname, &quot;TN20&quot;, &quot;TN2&quot;)) tn3_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN3/&quot;)) %&gt;% mutate(sample = &quot;TN3&quot;, tech = &quot;ACT&quot;, cellname = str_replace(cellname, &quot;TN17&quot;, &quot;TN3&quot;)) tn4_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN4/&quot;)) %&gt;% mutate(sample = &quot;TN4&quot;, tech = &quot;ACT&quot;, cellname = str_replace(cellname, &quot;TN26&quot;, &quot;TN4&quot;)) tn1_10xcnv_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN1_10XCNA/&quot;)) %&gt;% mutate(sample = &quot;TN1&quot;, tech = &quot;10X CNA&quot;) tn3_10xcnv_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN3_10XCNA/&quot;)) %&gt;% mutate(sample = &quot;TN3&quot;, tech = &quot;10X CNA&quot;) t2_doppcr_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/T2_DOPPCR//&quot;)) %&gt;% mutate(sample = &quot;T2&quot;, tech = &quot;DOP-PCR&quot;) t4_doppcr_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/T4_DOPPCR/&quot;)) %&gt;% mutate(sample = &quot;T4&quot;, tech = &quot;DOP-PCR&quot;) t8_doppcr_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/T8_DOPPCR/&quot;)) %&gt;% mutate(sample = &quot;T8&quot;, tech = &quot;DOP-PCR&quot;) t10_doppcr_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/T10_DOPPCR/&quot;)) %&gt;% mutate(sample = &quot;T10&quot;, tech = &quot;DOP-PCR&quot;) dlp_htert_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/DLP_htert/&quot;)) %&gt;% mutate(sample = &quot;hTERT&quot;, tech = &quot;DLP&quot;) dlp_xeno_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/DLP_xeno/&quot;)) %&gt;% mutate(sample = &quot;Xeno&quot;, tech = &quot;DLP&quot;) # bincounts TN1_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN1_bincounts.rds&quot;)) TN2_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN2_bincounts.rds&quot;)) TN3_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN3_bincounts.rds&quot;)) TN4_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN4_bincounts.rds&quot;)) TN1_10XCNA_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN1_10XCNA_bincounts.rds&quot;)) TN3_10XCNA_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN3_10XCNA_bincounts.rds&quot;)) DLP_xeno_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/DLP_xeno_bincounts.rds&quot;)) DLP_htert_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/DLP_htert_bincounts.rds&quot;)) T2_DOPPCR_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/T2_DOPPCR_bincounts.rds&quot;)) T4_DOPPCR_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/T4_DOPPCR_bincounts.rds&quot;)) T8_DOPPCR_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/T8_DOPPCR_bincounts.rds&quot;)) T10_DOPPCR_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/T10_DOPPCR_bincounts.rds&quot;)) all_cov &lt;- rbind(tn2_cov, tn1_cov, tn1_10xcnv_cov, tn4_cov, t2_doppcr_cov, t4_doppcr_cov, tn3_cov, tn3_10xcnv_cov, t8_doppcr_cov, t10_doppcr_cov, dlp_htert_cov, dlp_xeno_cov) p_breadth &lt;- all_cov %&gt;% mutate(tech = as.factor(tech)) %&gt;% mutate(sample = as.factor(sample)) %&gt;% mutate(sample = fct_relevel(sample, gtools::mixedsort(unique(all_cov$sample)))) %&gt;% mutate(tech = fct_relevel(tech, c(&quot;ACT&quot;, &quot;10X CNA&quot;,&quot;DLP&quot;, &quot;DOP-PCR&quot;))) %&gt;% ggplot() + geom_quasirandom(aes(x = sample, y = breadth, color = tech)) + scale_color_paletteer_d(&quot;nord::lumina&quot;) + theme_cowplot() + facet_wrap(vars(tech), nrow = 1, scales = &quot;free_x&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = .5, hjust = 1), strip.background = element_rect(fill = &quot;white&quot;), legend.position = &quot;none&quot;) p_breadth p_breadth_tech &lt;- ggplot(all_cov) + geom_quasirandom(aes( fct_relevel(tech, c(&quot;ACT&quot;, &quot;10X CNA&quot;, &quot;DLP&quot;,&quot;DOP-PCR&quot;)), y = breadth, color = tech)) + theme_cowplot() + scale_color_paletteer_d(&quot;nord::lumina&quot;) + scale_y_continuous(limits = c(0.0108, 0.0127), labels = scales::label_number(digits = 3)) + xlab(&quot;&quot;) + theme_cowplot() + theme(legend.position = &quot;none&quot;) p_breadth_tech all_cov %&gt;% ungroup() %&gt;% kruskal_test(breadth ~ tech) ## # A tibble: 1 x 6 ## .y. n statistic df p method ## * &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 breadth 662 537. 3 4.06e-116 Kruskal-Wallis all_cov %&gt;% ungroup() %&gt;% dunn_test(breadth ~ tech) ## # A tibble: 6 x 9 ## .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 breadth 10X CNA ACT 200 100 6.98 2.97e-12 5.95e-12 **** ## 2 breadth 10X CNA DLP 200 228 -11.3 2.10e-29 6.29e-29 **** ## 3 breadth 10X CNA DOP-PCR 200 134 -16.3 1.24e-59 6.18e-59 **** ## 4 breadth ACT DLP 100 228 -16.2 3.62e-59 1.45e-58 **** ## 5 breadth ACT DOP-PCR 100 134 -20.2 5.71e-91 3.43e-90 **** ## 6 breadth DLP DOP-PCR 228 134 -6.68 2.35e-11 2.35e-11 **** 2.2 Overdispersion TN1_overdispersion &lt;- map_dfr(TN1_bincounts, overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN1&quot;, tech = &quot;ACT&quot;, cells = names(TN1_bincounts)) %&gt;% dplyr::rename(iod = &quot;V1&quot;) TN2_overdispersion &lt;- map_dfr(TN2_bincounts, overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN2&quot;, tech = &quot;ACT&quot;, cells = names(TN2_bincounts)) %&gt;% dplyr::rename(iod = &quot;V1&quot;) TN3_overdispersion &lt;- map_dfr(TN3_bincounts, overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN3&quot;, tech = &quot;ACT&quot;, cells = names(TN3_bincounts)) %&gt;% dplyr::rename(iod = &quot;V1&quot;) TN4_overdispersion &lt;- map_dfr(TN4_bincounts, overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN4&quot;, tech = &quot;ACT&quot;, cells = names(TN4_bincounts)) %&gt;% dplyr::rename(iod = &quot;V1&quot;) #10X CNA names(TN1_10XCNA_bincounts) &lt;- str_replace(names(TN1_10XCNA_bincounts), &quot;\\\\.&quot;, &quot;-&quot;) TN1_10XCNA_overdispersion &lt;- map_dfr(TN1_10XCNA_bincounts, overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN1&quot;, tech = &quot;10X CNA&quot;, cells = names(TN1_10XCNA_bincounts)) %&gt;% dplyr::rename(iod = &quot;V1&quot;) names(TN3_10XCNA_bincounts) &lt;- str_replace(names(TN3_10XCNA_bincounts), &quot;\\\\.&quot;, &quot;-&quot;) TN3_10XCNA_overdispersion &lt;- map_dfr(TN3_10XCNA_bincounts, overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN3&quot;, tech = &quot;10X CNA&quot;, cells = names(TN3_10XCNA_bincounts)) %&gt;% dplyr::rename(iod = &quot;V1&quot;) # DLP DLP_xeno_overdispersion &lt;- map_dfr(DLP_xeno_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;Xeno&quot;, tech = &quot;DLP&quot;, cells = names(DLP_xeno_bincounts)[-c(1:3)]) %&gt;% dplyr::rename(iod = &quot;V1&quot;) DLP_htert_overdispersion &lt;- map_dfr(DLP_htert_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;hTERT&quot;, tech = &quot;DLP&quot;, cells = names(DLP_htert_bincounts)[-c(1:3)]) %&gt;% dplyr::rename(iod = &quot;V1&quot;) #DOP-PCR T2_DOPPCR_overdispersion &lt;- map_dfr(T2_DOPPCR_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;T2&quot;, tech = &quot;DOP-PCR&quot;, cells = toupper(names(T2_DOPPCR_bincounts)[-c(1:3)])) %&gt;% dplyr::rename(iod = &quot;V1&quot;) T4_DOPPCR_overdispersion &lt;- map_dfr(T4_DOPPCR_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;T4&quot;, tech = &quot;DOP-PCR&quot;, cells = toupper(names(T4_DOPPCR_bincounts)[-c(1:3)])) %&gt;% dplyr::rename(iod = &quot;V1&quot;) T8_DOPPCR_overdispersion &lt;- map_dfr(T8_DOPPCR_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;T8&quot;, tech = &quot;DOP-PCR&quot;, cells = toupper(names(T8_DOPPCR_bincounts)[-c(1:3)])) %&gt;% dplyr::rename(iod = &quot;V1&quot;) T10_DOPPCR_overdispersion &lt;- map_dfr(T10_DOPPCR_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;T10&quot;, tech = &quot;DOP-PCR&quot;, cells = toupper(names(T10_DOPPCR_bincounts)[-c(1:3)])) %&gt;% dplyr::rename(iod = &quot;V1&quot;) all_overdispersion &lt;- bind_rows( TN1_overdispersion, TN2_overdispersion, TN3_overdispersion, TN4_overdispersion, T2_DOPPCR_overdispersion, T4_DOPPCR_overdispersion, T8_DOPPCR_overdispersion, T10_DOPPCR_overdispersion, DLP_htert_overdispersion, DLP_xeno_overdispersion, TN1_10XCNA_overdispersion, TN3_10XCNA_overdispersion ) # subsetting same cells sampled during the BAM file sampling for coverage breadth all_overdispersion &lt;- all_overdispersion %&gt;% filter(cells %in% all_cov$cellname) p_iod &lt;- all_overdispersion %&gt;% mutate(tech = as.factor(tech)) %&gt;% mutate(sample = as.factor(sample)) %&gt;% mutate(sample = fct_relevel(sample, gtools::mixedsort(unique(all_cov$sample)))) %&gt;% mutate(tech = fct_relevel(tech, c(&quot;ACT&quot;, &quot;10X CNA&quot;, &quot;DLP&quot;, &quot;DOP-PCR&quot;))) %&gt;% ggplot() + ggbeeswarm::geom_quasirandom(aes(x = sample, y = iod, color = tech)) + scale_color_manual(values = paletteer_d(&quot;nord::lumina&quot;)) + facet_wrap(vars(tech), nrow = 1, scales = &quot;free_x&quot;) + scale_y_continuous(breaks = scales::pretty_breaks(n=10)) + theme_cowplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = &quot;none&quot;, strip.background = element_rect(fill = &quot;white&quot;)) + ylab(&quot;overdispersion&quot;) + xlab(&quot;&quot;) p_iod p_iod_tech &lt;- all_overdispersion %&gt;% ggplot(aes(x = fct_relevel(tech, c(&quot;ACT&quot;, &quot;10X CNA&quot;, &quot;DLP&quot;,&quot;DOP-PCR&quot;)), y = iod)) + ggbeeswarm::geom_quasirandom(aes(color = tech)) + scale_y_continuous(breaks = scales::pretty_breaks(n=5)) + scale_color_paletteer_d(&quot;nord::lumina&quot;) + theme_cowplot() + xlab(&quot;&quot;) + ylab(&quot;overdispersion&quot;) + theme(legend.position = &quot;none&quot;) p_iod_tech "],
["tumors.html", "3 Tumors 3.1 TN1 3.2 TN2 3.3 TN3 3.4 TN4 3.5 TN5 3.6 TN6 3.7 TN7 3.8 TN8 3.9 Clones barplot 3.10 Shannon diversity 3.11 Gains/Losses plot 3.12 Genomic classes plots", " 3 Tumors # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 14:23:11 2021 # ggplot theme setup # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 14:23:17 2021 my_theme &lt;- list( ggplot2::theme( axis.title.x = element_text(colour = &quot;black&quot;, size = 16), axis.text.x = element_text(size = 14), axis.title.y = element_text(colour = &quot;black&quot;, size = 16), axis.text.y = element_text(size = 14), legend.position = &quot;top&quot;, legend.title = element_blank(), legend.text = element_text(size = 14) ) ) 3.1 TN1 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:42 2020 # Tumors Heatmaps/Consensus/Trees # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:47 2020 TN1_ploidy &lt;- 3.45 TN1_popseg &lt;- readRDS(here(&quot;extdata/popseg/TN1_popseg.rds&quot;)) TN1_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN1_popseg_long_ml.rds&quot;)) TN1_umap &lt;- run_umap(TN1_popseg_long_ml) ## Constructing UMAP embedding. TN1_clustering &lt;- run_clustering(TN1_umap, k_snn_major = 45, k_snn_minor = 17) ## Loading required package: SingleCellExperiment ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 32 0.02909091 ## c10 24 0.02181818 ## c11 45 0.04090909 ## c12 19 0.01727273 ## c13 79 0.07181818 ## c14 23 0.02090909 ## c15 51 0.04636364 ## c16 23 0.02090909 ## c17 149 0.13545455 ## c2 56 0.05090909 ## c3 134 0.12181818 ## c4 66 0.06000000 ## c5 40 0.03636364 ## c6 39 0.03545455 ## c7 74 0.06727273 ## c8 228 0.20727273 ## c9 18 0.01636364 ## Done. TN1_ordered &lt;- order_dataset(popseg_long = TN1_popseg_long_ml, clustering = TN1_clustering) plot_umap(umap_df = TN1_umap, clustering = TN1_clustering) ## Joining, by = &quot;cells&quot; TN1_consensus &lt;- calculate_consensus(df = TN1_ordered$dataset_ordered, clusters = TN1_ordered$clustering_ordered$subclones) TN1_gen_classes &lt;- consensus_genomic_classes(TN1_consensus, ploidy_VAL = TN1_ploidy) TN1_me_consensus_tree &lt;- run_me_tree(consensus_df = TN1_consensus, clusters = TN1_clustering, ploidy_VAL = TN1_ploidy) ## Warning: `data_frame()` is deprecated as of tibble 1.1.0. ## Please use `tibble()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_warnings()` to see where this warning was generated. ## Warning: `mutate_()` is deprecated as of dplyr 0.7.0. ## Please use `mutate()` instead. ## See vignette(&#39;programming&#39;) for more help ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_warnings()` to see where this warning was generated. TN1_annotation_genes &lt;- c(&quot;SHC1&quot;, &quot;RUVBL1&quot;, &quot;PIK3CA&quot;, &quot;FGFR4&quot;, &quot;CDKN1A&quot;, &quot;EGFR&quot;, &quot;FGFR1&quot;, &quot;MYC&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;PTEN&quot;, &quot;CDK4&quot;, &quot;MDM2&quot;, &quot;BRCA2&quot;, &quot;RB1&quot;, &quot;TP53&quot;, &quot;BRCA1&quot;, &quot;CCNE1&quot;, &quot;AURKA&quot;, &quot;CCND1&quot;) plot_heatmap(df = TN1_ordered$dataset_ordered, ploidy_VAL = TN1_ploidy, ploidy_trunc = 2*(round(TN1_ploidy)), clusters = TN1_ordered$clustering_ordered, genomic_classes = TN1_gen_classes, keep_gene = TN1_annotation_genes, tree_order = TN1_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. plot_consensus_heatmap(df = TN1_consensus, clusters = TN1_ordered$clustering_ordered, ploidy_VAL = TN1_ploidy, ploidy_trunc = 2*(round(TN1_ploidy)), keep_gene = TN1_annotation_genes, tree_order = TN1_me_consensus_tree$cs_tree_order, plot_title = NULL, genomic_classes = TN1_gen_classes) ## Warning: Setting row names on a tibble is deprecated. ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. 3.2 TN2 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:42 2020 # Tumors Heatmaps/Consensus/Trees # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:47 2020 TN2_ploidy &lt;- 3.03 TN2_popseg &lt;- readRDS(here(&quot;extdata/popseg/TN2_popseg.rds&quot;)) TN2_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN2_popseg_long_ml.rds&quot;)) TN2_umap &lt;- run_umap(TN2_popseg_long_ml) ## Constructing UMAP embedding. TN2_clustering &lt;- run_clustering(TN2_umap, k_snn_major = 63, k_snn_minor = 17) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 23 0.02246094 ## c10 147 0.14355469 ## c11 31 0.03027344 ## c12 140 0.13671875 ## c13 43 0.04199219 ## c14 34 0.03320312 ## c15 156 0.15234375 ## c2 22 0.02148438 ## c3 55 0.05371094 ## c4 51 0.04980469 ## c5 44 0.04296875 ## c6 44 0.04296875 ## c7 28 0.02734375 ## c8 170 0.16601562 ## c9 36 0.03515625 ## Done. TN2_ordered &lt;- order_dataset(popseg_long = TN2_popseg_long_ml, clustering = TN2_clustering) plot_umap(umap_df = TN2_umap, clustering = TN2_clustering) ## Joining, by = &quot;cells&quot; TN2_consensus &lt;- calculate_consensus(df = TN2_ordered$dataset_ordered, clusters = TN2_ordered$clustering_ordered$subclones) TN2_gen_classes &lt;- consensus_genomic_classes(TN2_consensus, ploidy_VAL = TN2_ploidy) TN2_me_consensus_tree &lt;- run_me_tree(consensus_df = TN2_consensus, clusters = TN2_clustering, ploidy_VAL = TN2_ploidy) TN2_annotation_genes &lt;- c( &quot;SHC1&quot;, &quot;PIK3CA&quot;, &quot;FGFR4&quot;, &quot;CDKN1A&quot;, &quot;EGFR&quot;, &quot;MTDH&quot;, &quot;MYC&quot;, &quot;GATA3&quot;, &quot;PTEN&quot;, &quot;CCND1&quot;, &quot;PGR&quot;, &quot;CDK4&quot;, &quot;MDM2&quot;, &quot;LRP1B&quot;, &quot;BRCA2&quot;, &quot;TP53&quot;, &quot;BRCA1&quot;, &quot;BCL2&quot;, &quot;CCNE1&quot;, &quot;AURKA&quot; ) plot_heatmap(df = TN2_ordered$dataset_ordered, ploidy_VAL = TN2_ploidy, ploidy_trunc = 2*(round(TN2_ploidy)), clusters = TN2_ordered$clustering_ordered, genomic_classes = TN2_gen_classes, keep_gene = TN2_annotation_genes, tree_order = TN2_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. plot_consensus_heatmap(df = TN2_consensus, clusters = TN2_ordered$clustering_ordered, ploidy_VAL = TN2_ploidy, ploidy_trunc = 2*(round(TN2_ploidy)), keep_gene = TN2_annotation_genes, tree_order = TN2_me_consensus_tree$cs_tree_order, plot_title = NULL, genomic_classes = TN2_gen_classes) ## Warning: Setting row names on a tibble is deprecated. ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. 3.3 TN3 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:42 2020 # Tumors Heatmaps/Consensus/Trees # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:47 2020 TN3_ploidy &lt;- 3.44 TN3_popseg &lt;- readRDS(here(&quot;extdata/popseg/TN3_popseg.rds&quot;)) TN3_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN3_popseg_long_ml.rds&quot;)) TN3_umap &lt;- run_umap(TN3_popseg_long_ml) ## Constructing UMAP embedding. TN3_clustering &lt;- run_clustering(TN3_umap, k_snn_major = 65, k_snn_minor = 17) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 67 0.06085377 ## c2 71 0.06448683 ## c3 63 0.05722071 ## c4 450 0.40871935 ## c5 33 0.02997275 ## c6 32 0.02906449 ## c7 77 0.06993642 ## c8 106 0.09627611 ## c9 202 0.18346957 ## Done. TN3_ordered &lt;- order_dataset(popseg_long = TN3_popseg_long_ml, clustering = TN3_clustering) plot_umap(umap_df = TN3_umap, clustering = TN3_clustering) ## Joining, by = &quot;cells&quot; TN3_consensus &lt;- calculate_consensus(df = TN3_ordered$dataset_ordered, clusters = TN3_ordered$clustering_ordered$subclones) TN3_gen_classes &lt;- consensus_genomic_classes(TN3_consensus, ploidy_VAL = TN3_ploidy) TN3_me_consensus_tree &lt;- run_me_tree(consensus_df = TN3_consensus, clusters = TN3_clustering, ploidy_VAL = TN3_ploidy) TN3_annotation_genes &lt;- c( &quot;CDKN2C&quot;, &quot;SHC1&quot;, &quot;PIK3CA&quot;, &quot;FGFR4&quot;, &quot;EGFR&quot;, &quot;FGFR1&quot;, &quot;MYC&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;PTEN&quot;, &quot;CCND1&quot;, &quot;CDK4&quot;, &quot;MDM2&quot;, &quot;RB1&quot;, &quot;TP53&quot;, &quot;BRCA1&quot;, &quot;BCL2&quot;, &quot;CCNE1&quot;, &quot;AURKA&quot;, &quot;LRP1B&quot; ) plot_heatmap(df = TN3_ordered$dataset_ordered, ploidy_VAL = TN3_ploidy, ploidy_trunc = 2*(round(TN3_ploidy)), clusters = TN3_ordered$clustering_ordered, genomic_classes = TN3_gen_classes, keep_gene = TN3_annotation_genes, tree_order = TN3_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. plot_consensus_heatmap(df = TN3_consensus, clusters = TN3_ordered$clustering_ordered, ploidy_VAL = TN3_ploidy, ploidy_trunc = 2*(round(TN3_ploidy)), keep_gene = TN3_annotation_genes, tree_order = TN3_me_consensus_tree$cs_tree_order, plot_title = NULL, genomic_classes = TN3_gen_classes) ## Warning: Setting row names on a tibble is deprecated. ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. 3.4 TN4 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:42 2020 # Tumors Heatmaps/Consensus/Trees # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:47 2020 TN4_ploidy &lt;- 3.81 TN4_popseg &lt;- readRDS(here(&quot;extdata/popseg/TN4_popseg.rds&quot;)) TN4_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN4_popseg_long_ml.rds&quot;)) TN4_umap &lt;- run_umap(TN4_popseg_long_ml) ## Constructing UMAP embedding. TN4_clustering &lt;- run_clustering(TN4_umap, k_snn_major = 75, k_snn_minor = 17) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 255 0.19510329 ## c10 29 0.02218822 ## c11 42 0.03213466 ## c12 46 0.03519510 ## c13 32 0.02448355 ## c14 45 0.03442999 ## c15 220 0.16832441 ## c16 29 0.02218822 ## c17 70 0.05355777 ## c18 37 0.02830910 ## c19 27 0.02065800 ## c2 31 0.02371844 ## c20 36 0.02754399 ## c21 66 0.05049732 ## c22 26 0.01989288 ## c3 31 0.02371844 ## c4 56 0.04284621 ## c5 29 0.02218822 ## c6 66 0.05049732 ## c7 54 0.04131599 ## c8 48 0.03672533 ## c9 32 0.02448355 ## Done. TN4_ordered &lt;- order_dataset(popseg_long = TN4_popseg_long_ml, clustering = TN4_clustering) plot_umap(umap_df = TN4_umap, clustering = TN4_clustering) ## Joining, by = &quot;cells&quot; TN4_consensus &lt;- calculate_consensus(df = TN4_ordered$dataset_ordered, clusters = TN4_ordered$clustering_ordered$subclones) TN4_gen_classes &lt;- consensus_genomic_classes(TN4_consensus, ploidy_VAL = TN4_ploidy) TN4_me_consensus_tree &lt;- run_me_tree(consensus_df = TN4_consensus, clusters = TN4_clustering, ploidy_VAL = TN4_ploidy) TN4_annotation_genes &lt;- c( &quot;CDKN2C&quot;, &quot;SHC1&quot;, &quot;PIK3CA&quot;, &quot;CDKN1A&quot;, &quot;ESR1&quot;, &quot;EGFR&quot;, &quot;MYC&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;PTEN&quot;, &quot;MDM2&quot;, &quot;BRCA2&quot;, &quot;RB1&quot;, &quot;TP53&quot;, &quot;BRCA1&quot;, &quot;BCL2&quot;, &quot;CCNE1&quot;, &quot;NCOA3&quot;, &quot;AURKA&quot;, &quot;IGF1R&quot;, &quot;NCOA1&quot; ) plot_heatmap(df = TN4_ordered$dataset_ordered, ploidy_VAL = TN4_ploidy, ploidy_trunc = 2*(round(TN4_ploidy)), clusters = TN4_ordered$clustering_ordered, genomic_classes = TN4_gen_classes, keep_gene = TN4_annotation_genes, tree_order = TN4_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns plot_consensus_heatmap(df = TN4_consensus, clusters = TN4_ordered$clustering_ordered, ploidy_VAL = TN4_ploidy, ploidy_trunc = 2*(round(TN4_ploidy)), keep_gene = TN4_annotation_genes, tree_order = TN4_me_consensus_tree$cs_tree_order, plot_title = NULL, genomic_classes = TN4_gen_classes) ## &#39;select()&#39; returned 1:1 mapping between keys and columns 3.5 TN5 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:42 2020 # Tumors Heatmaps/Consensus/Trees # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:47 2020 TN5_ploidy &lt;- 2.65 TN5_popseg &lt;- readRDS(here(&quot;extdata/popseg/TN5_popseg.rds&quot;)) TN5_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN5_popseg_long_ml.rds&quot;)) TN5_umap &lt;- run_umap(TN5_popseg_long_ml) ## Constructing UMAP embedding. TN5_clustering &lt;- run_clustering(TN5_umap, k_snn_major = 41, k_snn_minor = 17) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 52 0.04200323 ## c2 53 0.04281099 ## c3 573 0.46284330 ## c4 27 0.02180937 ## c5 389 0.31421648 ## c6 26 0.02100162 ## c7 118 0.09531502 ## Done. TN5_ordered &lt;- order_dataset(popseg_long = TN5_popseg_long_ml, clustering = TN5_clustering) plot_umap(umap_df = TN5_umap, clustering = TN5_clustering) ## Joining, by = &quot;cells&quot; TN5_consensus &lt;- calculate_consensus(df = TN5_ordered$dataset_ordered, clusters = TN5_ordered$clustering_ordered$subclones) TN5_gen_classes &lt;- consensus_genomic_classes(TN5_consensus, ploidy_VAL = TN5_ploidy) TN5_me_consensus_tree &lt;- run_me_tree(consensus_df = TN5_consensus, clusters = TN5_clustering, ploidy_VAL = TN5_ploidy, rotate_nodes = c(8,10,11)) TN5_annotation_genes &lt;- c( &quot;CDKN2C&quot;, &quot;GADD45A&quot;, &quot;SHC1&quot;, &quot;PIK3CA&quot;, &quot;FGFR4&quot;, &quot;EGFR&quot;, &quot;FGFR1&quot;, &quot;MYC&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;PTEN&quot;, &quot;CCND1&quot;, &quot;MDM2&quot;, &quot;BRCA2&quot;, &quot;RB1&quot;, &quot;TP53&quot;, &quot;BRCA1&quot;, &quot;PPM1D&quot;, &quot;CCNE1&quot;, &quot;ERBB2&quot;, &quot;ESR1&quot; ) plot_heatmap(df = TN5_ordered$dataset_ordered, ploidy_VAL = TN5_ploidy, ploidy_trunc = 2*(round(TN5_ploidy)), clusters = TN5_ordered$clustering_ordered, genomic_classes = TN5_gen_classes, keep_gene = TN5_annotation_genes, tree_order = TN5_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns plot_consensus_heatmap(df = TN5_consensus, clusters = TN5_ordered$clustering_ordered, ploidy_VAL = TN5_ploidy, ploidy_trunc = 2*(round(TN5_ploidy)), keep_gene = TN5_annotation_genes, tree_order = TN5_me_consensus_tree$cs_tree_order, plot_title = NULL, genomic_classes = TN5_gen_classes) ## &#39;select()&#39; returned 1:1 mapping between keys and columns 3.6 TN6 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:42 2020 # Tumors Heatmaps/Consensus/Trees # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:47 2020 TN6_ploidy &lt;- 3.17 TN6_popseg &lt;- readRDS(here(&quot;extdata/popseg/TN6_popseg.rds&quot;)) TN6_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN6_popseg_long_ml.rds&quot;)) TN6_umap &lt;- run_umap(TN6_popseg_long_ml) ## Constructing UMAP embedding. TN6_clustering &lt;- run_clustering(TN6_umap, k_snn_major = 51, k_snn_minor = 17) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 31 0.02249637 ## c10 211 0.15312046 ## c11 31 0.02249637 ## c12 82 0.05950653 ## c13 111 0.08055152 ## c14 37 0.02685051 ## c15 37 0.02685051 ## c16 197 0.14296081 ## c2 25 0.01814224 ## c3 37 0.02685051 ## c4 33 0.02394775 ## c5 42 0.03047896 ## c6 51 0.03701016 ## c7 393 0.28519594 ## c8 18 0.01306241 ## c9 42 0.03047896 ## Done. TN6_ordered &lt;- order_dataset(popseg_long = TN6_popseg_long_ml, clustering = TN6_clustering) plot_umap(umap_df = TN6_umap, clustering = TN6_clustering) ## Joining, by = &quot;cells&quot; TN6_consensus &lt;- calculate_consensus(df = TN6_ordered$dataset_ordered, clusters = TN6_ordered$clustering_ordered$subclones) TN6_gen_classes &lt;- consensus_genomic_classes(TN6_consensus, ploidy_VAL = TN6_ploidy) TN6_me_consensus_tree &lt;- run_me_tree(consensus_df = TN6_consensus, clusters = TN6_clustering, ploidy_VAL = TN6_ploidy, rotate_nodes = c(17:20, 22, 29)) TN6_annotation_genes &lt;- c( &quot;CDKN2C&quot;, &quot;SHC1&quot;, &quot;RUVBL1&quot;, &quot;PIK3CA&quot;, &quot;CDKN1A&quot;, &quot;EGFR&quot;, &quot;FGFR1&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;PTEN&quot;, &quot;CDK4&quot;, &quot;MDM2&quot;, &quot;BRCA2&quot;, &quot;RB1&quot;, &quot;TP53&quot;, &quot;BRCA1&quot;, &quot;BCL2&quot;, &quot;NCOA3&quot;, &quot;AURKA&quot;, &quot;GATA3&quot;, &quot;PGR&quot; ) plot_heatmap(df = TN6_ordered$dataset_ordered, ploidy_VAL = TN6_ploidy, ploidy_trunc = 2*(round(TN6_ploidy)), clusters = TN6_ordered$clustering_ordered, genomic_classes = TN6_gen_classes, keep_gene = TN6_annotation_genes, tree_order = TN6_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns plot_consensus_heatmap(df = TN6_consensus, clusters = TN6_ordered$clustering_ordered, ploidy_VAL = TN6_ploidy, ploidy_trunc = 2*(round(TN6_ploidy)), keep_gene = TN6_annotation_genes, tree_order = TN6_me_consensus_tree$cs_tree_order, plot_title = NULL, genomic_classes = TN6_gen_classes) ## &#39;select()&#39; returned 1:1 mapping between keys and columns 3.7 TN7 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:42 2020 # Tumors Heatmaps/Consensus/Trees # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:47 2020 TN7_ploidy &lt;- 3.15 TN7_popseg &lt;- readRDS(here(&quot;extdata/popseg/TN7_popseg.rds&quot;)) TN7_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN7_popseg_long_ml.rds&quot;)) TN7_umap &lt;- run_umap(TN7_popseg_long_ml) ## Constructing UMAP embedding. TN7_clustering &lt;- run_clustering(TN7_umap, k_snn_major = 35, k_snn_minor = 17) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 17 0.01220388 ## c10 59 0.04235463 ## c11 110 0.07896626 ## c12 63 0.04522613 ## c13 152 0.10911701 ## c14 365 0.26202441 ## c15 30 0.02153625 ## c16 37 0.02656138 ## c17 40 0.02871500 ## c18 53 0.03804738 ## c2 114 0.08183776 ## c3 51 0.03661163 ## c4 45 0.03230438 ## c5 40 0.02871500 ## c6 55 0.03948313 ## c7 56 0.04020101 ## c8 80 0.05743001 ## c9 26 0.01866475 ## Done. TN7_ordered &lt;- order_dataset(popseg_long = TN7_popseg_long_ml, clustering = TN7_clustering) plot_umap(umap_df = TN7_umap, clustering = TN7_clustering) ## Joining, by = &quot;cells&quot; TN7_consensus &lt;- calculate_consensus(df = TN7_ordered$dataset_ordered, clusters = TN7_ordered$clustering_ordered$subclones) TN7_gen_classes &lt;- consensus_genomic_classes(TN7_consensus, ploidy_VAL = TN7_ploidy) TN7_me_consensus_tree &lt;- run_me_tree(consensus_df = TN7_consensus, clusters = TN7_clustering, ploidy_VAL = TN7_ploidy, rotate_nodes = c(26, 27)) TN7_annotation_genes &lt;- c( &quot;CDKN2C&quot;, &quot;SHC1&quot;, &quot;RUVBL1&quot;, &quot;PIK3CA&quot;, &quot;CDKN1A&quot;, &quot;EGFR&quot;, &quot;FGFR1&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;PTEN&quot;, &quot;CDK4&quot;, &quot;MDM2&quot;, &quot;BRCA2&quot;, &quot;RB1&quot;, &quot;TP53&quot;, &quot;BRCA1&quot;, &quot;BCL2&quot;, &quot;NCOA3&quot;, &quot;AURKA&quot;, &quot;GATA3&quot;, &quot;PGR&quot; ) plot_heatmap(df = TN7_ordered$dataset_ordered, ploidy_VAL = TN7_ploidy, ploidy_trunc = 2*(round(TN7_ploidy)), clusters = TN7_ordered$clustering_ordered, genomic_classes = TN7_gen_classes, keep_gene = TN7_annotation_genes, tree_order = TN7_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns plot_consensus_heatmap(df = TN7_consensus, clusters = TN7_ordered$clustering_ordered, ploidy_VAL = TN7_ploidy, ploidy_trunc = 2*(round(TN7_ploidy)), keep_gene = TN7_annotation_genes, tree_order = TN7_me_consensus_tree$cs_tree_order, plot_title = NULL, genomic_classes = TN7_gen_classes) ## &#39;select()&#39; returned 1:1 mapping between keys and columns 3.8 TN8 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:42 2020 # Tumors Heatmaps/Consensus/Trees # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:47 2020 TN8_ploidy &lt;- 3.95 TN8_popseg &lt;- readRDS(here(&quot;extdata/popseg/TN8_popseg.rds&quot;)) TN8_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN8_popseg_long_ml.rds&quot;)) TN8_umap &lt;- run_umap(TN8_popseg_long_ml) ## Constructing UMAP embedding. TN8_clustering &lt;- run_clustering(TN8_umap, k_snn_major = 43, k_snn_minor = 17) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 38 0.03104575 ## c10 29 0.02369281 ## c11 52 0.04248366 ## c12 45 0.03676471 ## c13 43 0.03513072 ## c14 44 0.03594771 ## c15 263 0.21486928 ## c2 54 0.04411765 ## c3 96 0.07843137 ## c4 55 0.04493464 ## c5 88 0.07189542 ## c6 22 0.01797386 ## c7 35 0.02859477 ## c8 325 0.26552288 ## c9 35 0.02859477 ## Done. TN8_ordered &lt;- order_dataset(popseg_long = TN8_popseg_long_ml, clustering = TN8_clustering) plot_umap(umap_df = TN8_umap, clustering = TN8_clustering) ## Joining, by = &quot;cells&quot; TN8_consensus &lt;- calculate_consensus(df = TN8_ordered$dataset_ordered, clusters = TN8_ordered$clustering_ordered$subclones) TN8_gen_classes &lt;- consensus_genomic_classes(TN8_consensus, ploidy_VAL = TN8_ploidy) TN8_me_consensus_tree &lt;- run_me_tree(consensus_df = TN8_consensus, clusters = TN8_clustering, ploidy_VAL = TN8_ploidy, rotate_nodes = c(17,18, 25, 29)) TN8_annotation_genes &lt;- c( &quot;CDKN2C&quot;, &quot;SHC1&quot;, &quot;ESR1&quot;, &quot;MTDH&quot;, &quot;MYC&quot;, &quot;GATA3&quot;, &quot;PTEN&quot;, &quot;PGR&quot;, &quot;MDM2&quot;, &quot;BRCA2&quot;, &quot;RB1&quot;, &quot;BCL2&quot;, &quot;NCOA3&quot;, &quot;AURKA&quot;, &quot;CHEK2&quot; ) plot_heatmap(df = TN8_ordered$dataset_ordered, ploidy_VAL = TN8_ploidy, ploidy_trunc = 2*(round(TN8_ploidy)), clusters = TN8_ordered$clustering_ordered, genomic_classes = TN8_gen_classes, keep_gene = TN8_annotation_genes, tree_order = TN8_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns plot_consensus_heatmap(df = TN8_consensus, clusters = TN8_ordered$clustering_ordered, ploidy_VAL = TN8_ploidy, ploidy_trunc = 2*(round(TN8_ploidy)), keep_gene = TN8_annotation_genes, tree_order = TN8_me_consensus_tree$cs_tree_order, plot_title = NULL, genomic_classes = TN8_gen_classes) ## &#39;select()&#39; returned 1:1 mapping between keys and columns 3.9 Clones barplot n_clones_tumors &lt;- tibble( sample = rep(c( &quot;TN1&quot;, &quot;TN2&quot;, &quot;TN3&quot;, &quot;TN4&quot;, &quot;TN5&quot;, &quot;TN6&quot;, &quot;TN7&quot;, &quot;TN8&quot; ),2), n_clones = c( length(unique(TN1_clustering$superclones)), length(unique(TN2_clustering$superclones)), length(unique(TN3_clustering$superclones)), length(unique(TN4_clustering$superclones)), length(unique(TN5_clustering$superclones)), length(unique(TN6_clustering$superclones)), length(unique(TN7_clustering$superclones)), length(unique(TN8_clustering$superclones)), length(unique(TN1_clustering$subclones)), length(unique(TN2_clustering$subclones)), length(unique(TN3_clustering$subclones)), length(unique(TN4_clustering$subclones)), length(unique(TN5_clustering$subclones)), length(unique(TN6_clustering$subclones)), length(unique(TN7_clustering$subclones)), length(unique(TN8_clustering$subclones)) ), group = c( rep(&quot;superclones&quot;,8), rep(&quot;subclones&quot;, 8) ) ) p_clones_tumors &lt;- n_clones_tumors %&gt;% ggplot() + geom_col( aes( x = sample, y = n_clones, fill = fct_relevel(group, c(&quot;superclones&quot;, &quot;subclones&quot;)) ), position = &quot;dodge&quot; ) + theme_classic() + my_theme + theme(axis.text.x = element_text(angle = 90, vjust = .5)) + scale_y_continuous( breaks = scales::pretty_breaks(n = 10), limits = c(0, 22), expand = c(0, 0) ) + paletteer::scale_fill_paletteer_d(&quot;yarrr::info&quot;) + xlab(&quot;&quot;) + ylab(&quot;number of clones&quot;) p_clones_tumors 3.10 Shannon diversity shan &lt;- function(data, indices) { data_ind &lt;- data[indices] prop &lt;- janitor::tabyl(data_ind) %&gt;% pull(percent) div &lt;- -sum(prop*log(prop)) return(div) } TN1_proportions &lt;- janitor::tabyl(TN1_clustering$subclones) %&gt;% pull(percent) TN2_proportions &lt;- janitor::tabyl(TN2_clustering$subclones) %&gt;% pull(percent) TN3_proportions &lt;- janitor::tabyl(TN3_clustering$subclones) %&gt;% pull(percent) TN4_proportions &lt;- janitor::tabyl(TN4_clustering$subclones) %&gt;% pull(percent) TN5_proportions &lt;- janitor::tabyl(TN5_clustering$subclones) %&gt;% pull(percent) TN6_proportions &lt;- janitor::tabyl(TN6_clustering$subclones) %&gt;% pull(percent) TN7_proportions &lt;- janitor::tabyl(TN7_clustering$subclones) %&gt;% pull(percent) TN8_proportions &lt;- janitor::tabyl(TN8_clustering$subclones) %&gt;% pull(percent) TN1_diver &lt;- -sum(TN1_proportions*log(TN1_proportions)) TN2_diver &lt;- -sum(TN2_proportions*log(TN2_proportions)) TN3_diver &lt;- -sum(TN3_proportions*log(TN3_proportions)) TN4_diver &lt;- -sum(TN4_proportions*log(TN4_proportions)) TN5_diver &lt;- -sum(TN5_proportions*log(TN5_proportions)) TN6_diver &lt;- -sum(TN6_proportions*log(TN6_proportions)) TN7_diver &lt;- -sum(TN7_proportions*log(TN7_proportions)) TN8_diver &lt;- -sum(TN8_proportions*log(TN8_proportions)) boot_TN1 &lt;- boot::boot(TN1_clustering$subclones, statistic = shan, R = 3000) boot_TN1_ci &lt;- boot::boot.ci(boot_TN1) boot_TN2 &lt;- boot::boot(TN2_clustering$subclones, statistic = shan, R = 3000) boot_TN2_ci &lt;- boot::boot.ci(boot_TN2) boot_TN3 &lt;- boot::boot(TN3_clustering$subclones, statistic = shan, R = 3000) boot_TN3_ci &lt;- boot::boot.ci(boot_TN3) boot_TN4 &lt;- boot::boot(TN4_clustering$subclones, statistic = shan, R = 3000) boot_TN4_ci &lt;- boot::boot.ci(boot_TN4) boot_TN5 &lt;- boot::boot(TN5_clustering$subclones, statistic = shan, R = 3000) boot_TN5_ci &lt;- boot::boot.ci(boot_TN5) boot_TN6 &lt;- boot::boot(TN6_clustering$subclones, statistic = shan, R = 3000) boot_TN6_ci &lt;- boot::boot.ci(boot_TN6) boot_TN7 &lt;- boot::boot(TN7_clustering$subclones, statistic = shan, R = 3000) boot_TN7_ci &lt;- boot::boot.ci(boot_TN7) boot_TN8 &lt;- boot::boot(TN8_clustering$subclones, statistic = shan, R = 3000) boot_TN8_ci &lt;- boot::boot.ci(boot_TN8) div_table &lt;- tibble( sample = c(&quot;TN1&quot;, &quot;TN2&quot;, &quot;TN3&quot;, &quot;TN4&quot;, &quot;TN5&quot;, &quot;TN6&quot;, &quot;TN7&quot;, &quot;TN8&quot;), shannon_index = c( TN1_diver, TN2_diver, TN3_diver, TN4_diver, TN5_diver, TN6_diver, TN7_diver, TN8_diver ), lci = c( boot_TN1_ci$normal[2], boot_TN2_ci$normal[2], boot_TN3_ci$normal[2], boot_TN4_ci$normal[2], boot_TN5_ci$normal[2], boot_TN6_ci$normal[2], boot_TN7_ci$normal[2], boot_TN8_ci$normal[2] ), uci = c( boot_TN1_ci$normal[3], boot_TN2_ci$normal[3], boot_TN3_ci$normal[3], boot_TN4_ci$normal[3], boot_TN5_ci$normal[3], boot_TN6_ci$normal[3], boot_TN7_ci$normal[3], boot_TN8_ci$normal[3] ) ) # error bar = 95% confidence interval p_tumors_diver &lt;- div_table %&gt;% ggplot() + geom_errorbar(aes( x = fct_reorder(sample, shannon_index), ymin = lci, ymax = uci ), width = .1, size = 2) + geom_point(aes( x = fct_reorder(sample, shannon_index), y = shannon_index, color = sample ), size = 4) + theme_classic() + my_theme + theme(legend.position = &quot;none&quot;, axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1 )) + scale_y_continuous(breaks = scales::pretty_breaks(n = 12)) + scale_color_manual(values = c(rcartocolor::carto_pal(8, &quot;Safe&quot;))) + ylab(&quot;shannon diversity index&quot;) + xlab(&quot;&quot;) p_tumors_diver 3.11 Gains/Losses plot TN1_alt_perc &lt;- gain_loss_percentage(consensus = TN1_consensus, ploidy_VAL = TN1_ploidy, sample = &quot;TN1&quot;) TN2_alt_perc &lt;- gain_loss_percentage(consensus = TN2_consensus, ploidy = TN2_ploidy, sample = &quot;TN2&quot;) TN3_alt_perc &lt;- gain_loss_percentage(consensus = TN3_consensus, ploidy = TN3_ploidy, sample = &quot;TN3&quot;) TN4_alt_perc &lt;- gain_loss_percentage(consensus = TN4_consensus, ploidy = TN4_ploidy, sample = &quot;TN4&quot;) TN5_alt_perc &lt;- gain_loss_percentage(consensus = TN5_consensus, ploidy = TN5_ploidy, sample = &quot;TN5&quot;) TN6_alt_perc &lt;- gain_loss_percentage(consensus = TN6_consensus, ploidy = TN6_ploidy, sample = &quot;TN6&quot;) TN7_alt_perc &lt;- gain_loss_percentage(consensus = TN7_consensus, ploidy = TN7_ploidy, sample = &quot;TN7&quot;) TN8_alt_perc &lt;- gain_loss_percentage(consensus = TN8_consensus, ploidy = TN8_ploidy, sample = &quot;TN8&quot;) all_tumors_gainloss_percentage &lt;- bind_rows(TN2_alt_perc, TN3_alt_perc, TN4_alt_perc, TN1_alt_perc, TN5_alt_perc, TN6_alt_perc, TN7_alt_perc, TN8_alt_perc ) %&gt;% dplyr::rename(percent = n) p_gain_loss &lt;- ggplot() + geom_col(data = all_tumors_gainloss_percentage, aes(x = fct_relevel(clone, rev(unique(gtools::mixedsort(all_tumors_gainloss_percentage$clone)))), y = percent, fill = class ), color = &quot;black&quot;) + facet_wrap(vars(sample), ncol = 4, scales = &quot;free_y&quot;) + scale_fill_manual(values = c(&quot;ground_state&quot; = &quot;white&quot;, &quot;gain&quot; = &quot;firebrick3&quot;, &quot;loss&quot; = &quot;steelblue&quot;), label = c(&quot;loss&quot;, &quot;neutral&quot;, &quot;gain&quot;), breaks = c(&quot;loss&quot;, &quot;ground_state&quot;, &quot;gain&quot;)) + theme_cowplot() + theme(strip.background = element_rect(fill = &quot;white&quot;), legend.title = element_blank(), legend.position = &quot;top&quot;, axis.text = element_text(size = 10)) + coord_flip() + xlab(&quot;&quot;) # ggtitle(&quot;Percentage of gain_loss per subclone&quot;) p_gain_loss 3.12 Genomic classes plots 3.12.1 Counts TN1_seg_length &lt;- calc_genclass_length(TN1_gen_classes, popseg = TN1_popseg, popseg_long = TN1_popseg_long_ml) %&gt;% mutate(sample = &quot;TN1&quot;) TN2_seg_length &lt;- calc_genclass_length(TN2_gen_classes, popseg = TN2_popseg, popseg_long = TN2_popseg_long_ml) %&gt;% mutate(sample = &quot;TN2&quot;) TN3_seg_length &lt;- calc_genclass_length(TN3_gen_classes, popseg = TN3_popseg, popseg_long = TN3_popseg_long_ml) %&gt;% mutate(sample = &quot;TN3&quot;) TN4_seg_length &lt;- calc_genclass_length(TN4_gen_classes, popseg = TN4_popseg, popseg_long = TN4_popseg_long_ml) %&gt;% mutate(sample = &quot;TN4&quot;) TN5_seg_length &lt;- calc_genclass_length(TN5_gen_classes, popseg = TN5_popseg, popseg_long = TN5_popseg_long_ml) %&gt;% mutate(sample = &quot;TN5&quot;) TN6_seg_length &lt;- calc_genclass_length(TN6_gen_classes, popseg = TN6_popseg, popseg_long = TN6_popseg_long_ml) %&gt;% mutate(sample = &quot;TN6&quot;) TN7_seg_length &lt;- calc_genclass_length(TN7_gen_classes, popseg = TN7_popseg, popseg_long = TN7_popseg_long_ml) %&gt;% mutate(sample = &quot;TN7&quot;) TN8_seg_length &lt;- calc_genclass_length(TN8_gen_classes, popseg = TN8_popseg, popseg_long = TN8_popseg_long_ml) %&gt;% mutate(sample = &quot;TN8&quot;) df_cna &lt;- bind_rows(TN1_seg_length, TN2_seg_length, TN3_seg_length, TN4_seg_length, TN5_seg_length, TN6_seg_length, TN7_seg_length, TN8_seg_length) p_count_cna &lt;- df_cna %&gt;% dplyr::group_by(sample) %&gt;% dplyr::distinct(seg_index, .keep_all = TRUE) %&gt;% dplyr::count(class) %&gt;% dplyr::mutate(class = fct_relevel(class, c(&quot;uCNA&quot;, &quot;sCNA&quot;, &quot;cCNA&quot;))) %&gt;% ggplot() + geom_bar( aes(x = sample, y = n, fill = class), position = &quot;stack&quot;, stat = &quot;identity&quot;, width = .6 ) + scale_fill_manual( values = c( &quot;cCNA&quot; = &quot;#414451&quot;, &quot;sCNA&quot; = &quot;#A5ACAF&quot;, &quot;uCNA&quot; = &quot;#FF800E&quot; ), breaks = c(&quot;cCNA&quot;, &quot;sCNA&quot;, &quot;uCNA&quot;), labels = c(&quot;cCNA&quot;, &quot;sCNA&quot;, &quot;uCNA&quot;) ) + scale_y_continuous(breaks = scales::pretty_breaks(n = 15), expand = c(0, 0)) + theme_classic() + my_theme + theme(legend.position = &#39;top&#39;, axis.text.x = element_text(angle = 90, vjust = .5, hjust = 1), axis.text = element_text(color = &#39;black&#39;)) + xlab(&quot;&quot;) + ylab(&quot;CNA class count&quot;) p_count_cna 3.12.2 Segment length p_seg_box &lt;- df_cna %&gt;% dplyr::group_by(sample) %&gt;% dplyr::distinct(seg_index, .keep_all = TRUE) %&gt;% dplyr::mutate(class = fct_relevel(class, c(&quot;cCNA&quot;, &quot;sCNA&quot;, &quot;uCNA&quot;))) %&gt;% ggplot() + geom_boxplot( aes(x = sample, y = seg_length, fill = class), outlier.shape = 21, outlier.alpha = .3 ) + scale_fill_manual( values = c( &quot;cCNA&quot; = &quot;#414451&quot;, &quot;sCNA&quot; = &quot;#A5ACAF&quot;, &quot;uCNA&quot; = &quot;#FF800E&quot; ), breaks = c(&quot;cCNA&quot;, &quot;sCNA&quot;, &quot;uCNA&quot;), labels = c(&quot;cCNA&quot;, &quot;sCNA&quot;, &quot;uCNA&quot;) ) + theme_classic() + my_theme + theme(axis.text = element_text(color = &quot;black&quot;)) + scale_y_continuous( breaks = scales::pretty_breaks(n = 10), labels = scales::unit_format(unit = &quot;&quot;, scale = 1e-6) ) + xlab(&quot;&quot;) + ylab(&quot;segment length (Mb)&quot;) p_seg_box source(here(&quot;R/setup.R&quot;)) source(here(&quot;R/calc_sctree_dists.R&quot;)) source(here(&quot;R/plot_sctree.R&quot;)) "],
["single-cell-trees.html", "4 Single-Cell Trees", " 4 Single-Cell Trees Function used to generate the trees using ape::fastme.bal() is make_single_cell_tree. Trees generated from the following function are provided in the directory extdata/trees make_single_cell_tree &lt;- function(tumor_log_segratio, ploidy_VAL_diploid = 2, tumor_ploidy_VAL, tree_fun = &quot;fastme.bal&quot;, dist_metric = &quot;manhattan&quot;) { &#39;%!in%&#39; &lt;- function(x,y)!(&#39;%in%&#39;(x,y)) if (tree_fun %!in% c(&quot;nj&quot;, &quot;fastme.bal&quot;)) { stop(&quot;Please input a valid tree function. Accepted values are &#39;nj&#39; or &#39;fastme.bal&#39;&quot;) } normal_long &lt;- tibble( C1 = rep.int(1e-3, nrow(tumor_log_segratio)), C2 = rep.int(1e-3, nrow(tumor_log_segratio)), C3 = rep.int(1e-3, nrow(tumor_log_segratio)), C4 = rep.int(1e-3, nrow(tumor_log_segratio)) ) normal_long &lt;- as.data.frame(t(normal_long)) n_ploidy &lt;- ploidy_scale(ploidy_VAL_diploid, normal_long) rownames(n_ploidy) &lt;- rownames(normal_long) # tumor_long &lt;- create_popseg_long(popseg_tumor) # tumor cells only t_ploidy &lt;- ploidy_scale(tumor_ploidy_VAL, tumor_log_segratio) # combining normal and tumor cells combined &lt;- rbind(n_ploidy, t_ploidy) if (tree_fun == &quot;nj&quot;) { tree &lt;- ape::nj(amap::Dist(combined, method=dist_metric, nbproc = 40)) return(tree) } if (tree_fun == &quot;fastme.bal&quot;) { tree &lt;- ape::fastme.bal(amap::Dist(combined, method=dist_metric, nbproc = 40)) return(tree) } } tn1_tree &lt;- read.tree(here(&quot;extdata/trees/tn1_sc_tree.tree&quot;)) tn2_tree &lt;- read.tree(here(&quot;extdata/trees/tn2_sc_tree.tree&quot;)) tn3_tree &lt;- read.tree(here(&quot;extdata/trees/tn3_sc_tree.tree&quot;)) tn4_tree &lt;- read.tree(here(&quot;extdata/trees/tn4_sc_tree.tree&quot;)) tn5_tree &lt;- read.tree(here(&quot;extdata/trees/tn5_sc_tree.tree&quot;)) tn6_tree &lt;- read.tree(here(&quot;extdata/trees/tn6_sc_tree.tree&quot;)) tn7_tree &lt;- read.tree(here(&quot;extdata/trees/tn7_sc_tree.tree&quot;)) tn8_tree &lt;- read.tree(here(&quot;extdata/trees/tn8_sc_tree.tree&quot;)) source(here(&quot;R/plot_sctree.R&quot;)) plot_sctree(tn1_tree, title = &quot;TN1&quot;) plot_sctree(tn2_tree, title = &quot;TN2&quot;) plot_sctree(tn3_tree, title = &quot;TN3&quot;) plot_sctree(tn4_tree, title = &quot;TN4&quot;, anno_y = 1450) plot_sctree(tn5_tree, title = &quot;TN5&quot;, anno_y = 1350) plot_sctree(tn6_tree, title = &quot;TN6&quot;, anno_y = 1550) plot_sctree(tn7_tree, title = &quot;TN7&quot;, anno_y = 1550) plot_sctree(tn8_tree, title = &quot;TN8&quot;) tn1_dist_nodes &lt;- calc_sctree_dists(tn1_tree) %&gt;% mutate(sample = &quot;TN1&quot;) tn2_dist_nodes &lt;- calc_sctree_dists(tn2_tree) %&gt;% mutate(sample = &quot;TN2&quot;) tn3_dist_nodes &lt;- calc_sctree_dists(tn3_tree) %&gt;% mutate(sample = &quot;TN3&quot;) tn4_dist_nodes &lt;- calc_sctree_dists(tn4_tree) %&gt;% mutate(sample = &quot;TN4&quot;) tn5_dist_nodes &lt;- calc_sctree_dists(tn5_tree) %&gt;% mutate(sample = &quot;TN5&quot;) tn6_dist_nodes &lt;- calc_sctree_dists(tn6_tree) %&gt;% mutate(sample = &quot;TN6&quot;) tn7_dist_nodes &lt;- calc_sctree_dists(tn7_tree) %&gt;% mutate(sample = &quot;TN7&quot;) tn8_dist_nodes &lt;- calc_sctree_dists(tn8_tree) %&gt;% mutate(sample = &quot;TN8&quot;) tumors_dist_nodes &lt;- bind_rows( tn1_dist_nodes, tn2_dist_nodes, tn3_dist_nodes, tn4_dist_nodes, tn5_dist_nodes, tn6_dist_nodes, tn7_dist_nodes, tn8_dist_nodes ) sc_trees_dist_plots &lt;- tumors_dist_nodes %&gt;% gather(key = &quot;evolution&quot;, value = &quot;manhattan_dist&quot;, -sample, -truncal_node) %&gt;% ggplot(aes(y = manhattan_dist, x = fct_relevel(sample, rev(gtools::mixedsort(tumors_dist_nodes$sample))))) + geom_linerange(aes(ymin = 0, ymax = manhattan_dist, group = evolution), position = position_dodge(width = .5)) + geom_point(aes(color = evolution, group = evolution), position = position_dodge(width = .5), size = 4) + coord_flip() + scale_y_continuous(expand = c(0,0)) + scale_color_paletteer_d(&quot;ggthemes::hc_default&quot;) + labs(y = &quot;manhattan distance&quot;, color = &quot;&quot;, x = &quot;&quot;) + theme_cowplot() sc_trees_dist_plots "],
["act-10x-cna.html", "5 ACT &amp; 10X CNA 5.1 TN1 Co-clustering umaps 5.2 TN1 Gene Frequency Barplot 5.3 TN3 Co-clustering umaps 5.4 TN3 Gene Frequency Barplot", " 5 ACT &amp; 10X CNA source(&quot;R/setup.R&quot;) source(&quot;R/cn_freq_barplot.R&quot;) source(&quot;R/run_umap.R&quot;) source(&quot;R/run_clustering.R&quot;) source(&quot;R/order_dataset.R&quot;) source(&quot;R/plot_umap.R&quot;) source(&quot;R/calculate_consensus.R&quot;) source(&quot;R/consensus_genomic_classes.R&quot;) source(&quot;R/run_me_tree.R&quot;) source(&quot;R/plot_heatmap.R&quot;) cocluster_theme &lt;- list(theme_cowplot(), theme(axis.text.x= element_blank(), axis.ticks.x=element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.line = element_blank(), legend.position = &quot;none&quot;, panel.grid.major = element_line(size = .25, color = &#39;gray70&#39;, linetype = &quot;dashed&quot;), panel.grid.minor = element_line(size = .25, color = &#39;gray70&#39;, linetype = &quot;dashed&quot;), legend.title = element_blank(), plot.title = element_text(hjust = 0.5, face = &quot;plain&quot;), legend.text = element_text(size = 14), panel.border = element_rect(color = &quot;black&quot;, fill = NA, size = 2)), xlab(&quot;umap1&quot;), ylab(&quot;umap2&quot;), guides(colour = guide_legend(override.aes = list(alpha=1))) ) 5.1 TN1 Co-clustering umaps TN1_ploidy &lt;- 3.45 TN1_cocluster_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN1_cocluster_popseg_long_ml.rds&quot;)) TN1_cocluster_umap &lt;- run_umap(TN1_cocluster_popseg_long_ml, ploidy_VAL = TN1_ploidy, round = TRUE) ## Constructing UMAP embedding. TN1_cocluster_cluster &lt;- run_clustering(TN1_cocluster_umap, k_snn_minor = 35) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 308 0.15587045 ## c10 211 0.10678138 ## c11 41 0.02074899 ## c12 79 0.03997976 ## c13 148 0.07489879 ## c14 67 0.03390688 ## c15 169 0.08552632 ## c16 54 0.02732794 ## c17 159 0.08046559 ## c2 90 0.04554656 ## c3 41 0.02074899 ## c4 160 0.08097166 ## c5 70 0.03542510 ## c6 39 0.01973684 ## c7 55 0.02783401 ## c8 86 0.04352227 ## c9 199 0.10070850 ## Done. TN1_cocluster_df &lt;- TN1_cocluster_cluster %&gt;% mutate(tech = case_when( str_detect(cells, &quot;TN&quot;) ~ &quot;ACT&quot;, TRUE ~ &quot;10X CNA&quot; )) TN1_cocl_freq_plot &lt;- TN1_cocluster_df %&gt;% group_by(subclones) %&gt;% count(tech) %&gt;% mutate(freq = n/sum(n)) %&gt;% ggplot(aes(fct_reorder2(subclones, tech, freq), freq)) + geom_col(aes(fill = tech), color = &quot;black&quot;) + scale_fill_manual(values = c(&quot;#3C88C3&quot;, &quot;#C3773C&quot;)) + scale_x_discrete(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) + ylab(&quot;frequency&quot;) + xlab(&quot;&quot;) + labs(fill = NULL) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5)) TN1_cocl_freq_plot TN1_cocluster_umap$sample &lt;- case_when( grepl(&quot;TN28&quot;, TN1_cocluster_umap$cell) ~ &quot;ACT&quot;, TRUE ~ &quot;10X CNA&quot; ) TN1_cocluster_umap &lt;- TN1_cocluster_umap %&gt;% arrange(sample) %&gt;% left_join(TN1_cocluster_cluster, by = c(&quot;cell&quot; = &quot;cells&quot;)) TN1_cocluster_p_merge &lt;- ggplot(TN1_cocluster_umap) + geom_point(aes(x = V1, y = V2, color = sample), size = 2, alpha = 1) + scale_color_manual(values = c(&quot;#3C88C3&quot;, &quot;#C3773C&quot;)) + ggtitle(&quot;merge&quot;) + cocluster_theme + ylab(&quot;&quot;) + xlab(&quot;&quot;) TN1_cocluster_p_act &lt;- ggplot(TN1_cocluster_umap %&gt;% filter(sample == &quot;ACT&quot;)) + geom_point(aes(x = V1, y = V2, color = sample), size = 2, alpha = 1) + scale_color_manual(values = c(&quot;#C3773C&quot;)) + ggtitle(&quot;ACT&quot;) + cocluster_theme + xlab(&quot;&quot;) TN1_cocluster_p_tenx &lt;- ggplot(TN1_cocluster_umap %&gt;% filter(sample == &quot;10X CNA&quot;)) + geom_point(aes(x = V1, y = V2, color = sample), size = 2, alpha = 1) + scale_color_manual(values = c(&quot;#3C88C3&quot;)) + ggtitle(&quot;10X CNA&quot;) + cocluster_theme + ylab(&quot;&quot;) + xlab(&quot;&quot;) TN1_cocluster_p_cluster &lt;- ggplot(TN1_cocluster_umap) + geom_point(aes(x = V1, y = V2, color = subclones), size = 2, alpha = 1) + scale_color_manual(values = colors_vector$subclones) + cocluster_theme + ggtitle(&quot;co-clustering&quot;) + xlab(&quot;&quot;) + ylab(&quot;&quot;) TN1_cocluster_p &lt;- TN1_cocluster_p_act + TN1_cocluster_p_tenx + TN1_cocluster_p_merge + TN1_cocluster_p_cluster + patchwork::plot_layout(nrow = 1) TN1_cocluster_p TN1_cocluster_ordered &lt;- order_dataset(popseg_long = TN1_cocluster_popseg_long_ml, clustering = TN1_cocluster_cluster) TN1_cocluster_consensus &lt;- calculate_consensus(df = TN1_cocluster_ordered$dataset_ordered, clusters = TN1_cocluster_ordered$clustering_ordered$subclones) TN1_cocluster_gen_classes &lt;- consensus_genomic_classes(TN1_cocluster_consensus, ploidy_VAL = TN1_ploidy) TN1_cocluster_me_consensus_tree &lt;- run_me_tree(consensus_df = TN1_cocluster_consensus, clusters = TN1_cocluster_cluster, ploidy_VAL = TN1_ploidy, plot = FALSE) TN1_cocluster_annotation_genes &lt;- c(&quot;BRCA1&quot;, &quot;TP53&quot;, &quot;FGFR4&quot;, &quot;MDM2&quot;, &quot;CCND1&quot;, &quot;SHC1&quot;, &quot;CKS1B&quot;, &quot;MYC&quot;, &quot;RB1&quot;, &quot;MTDH&quot;) plot_heatmap(df = TN1_cocluster_ordered$dataset_ordered, ploidy_VAL = TN1_ploidy, ploidy_trunc = 2*(round(TN1_ploidy)), clusters = TN1_cocluster_ordered$clustering_ordered, genomic_classes = TN1_cocluster_gen_classes, keep_gene = TN1_cocluster_annotation_genes, tree_order = TN1_cocluster_me_consensus_tree$cs_tree_order, show_legend = TRUE, cocluster = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. 5.2 TN1 Gene Frequency Barplot # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:42 2020 # Tumors Heatmaps/Consensus/Trees # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:47 2020 TN1_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN1_popseg_long_ml.rds&quot;)) TN1_10xcnv_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN1_10xcnv_popseg_long_ml.rds&quot;)) cn_freq_barplot( act_df = TN1_popseg_long_ml, tenx_df = TN1_10xcnv_popseg_long_ml, keep_genes = c( &quot;BRCA1&quot;, &quot;TP53&quot;, &quot;FGFR4&quot;, &quot;MDM2&quot;, &quot;CCND1&quot;, &quot;SHC1&quot;, &quot;CKS1B&quot;, &quot;MYC&quot;, &quot;RB1&quot;, &quot;MTDH&quot; ), ploidy_VAL = TN1_ploidy ) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## &#39;select()&#39; returned 1:1 mapping between keys and columns 5.3 TN3 Co-clustering umaps TN3_ploidy &lt;- 3.44 TN3_cocluster_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN3_cocluster_popseg_long_ml.rds&quot;)) TN3_cocluster_umap &lt;- run_umap(TN3_cocluster_popseg_long_ml, ploidy_VAL = TN3_ploidy, round = TRUE) ## Constructing UMAP embedding. TN3_cocluster_cluster &lt;- run_clustering(TN3_cocluster_umap, k_snn_minor = 80) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 191 0.08797789 ## c2 595 0.27406725 ## c3 144 0.06632888 ## c4 136 0.06264394 ## c5 152 0.07001382 ## c6 233 0.10732381 ## c7 356 0.16397973 ## c8 88 0.04053432 ## c9 276 0.12713035 ## Done. TN3_cocluster_df &lt;- TN3_cocluster_cluster %&gt;% mutate(tech = case_when( str_detect(cells, &quot;TN&quot;) ~ &quot;ACT&quot;, TRUE ~ &quot;10X CNA&quot; )) TN3_cocl_freq_plot &lt;- TN3_cocluster_df %&gt;% group_by(subclones) %&gt;% count(tech) %&gt;% mutate(freq = n/sum(n)) %&gt;% ggplot(aes(fct_reorder2(subclones, tech, freq), freq)) + geom_col(aes(fill = tech), color = &quot;black&quot;) + scale_fill_manual(values = c(&quot;#3C88C3&quot;, &quot;#C3773C&quot;)) + scale_x_discrete(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) + ylab(&quot;frequency&quot;) + xlab(&quot;&quot;) + labs(fill = NULL) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5)) TN3_cocl_freq_plot TN3_cocluster_umap$sample &lt;- case_when( grepl(&quot;TN17&quot;, TN3_cocluster_umap$cell) ~ &quot;ACT&quot;, TRUE ~ &quot;10X CNA&quot; ) TN3_cocluster_umap &lt;- TN3_cocluster_umap %&gt;% arrange(sample) %&gt;% left_join(TN3_cocluster_cluster, by = c(&quot;cell&quot; = &quot;cells&quot;)) TN3_cocluster_p_merge &lt;- ggplot(TN3_cocluster_umap) + geom_point(aes(x = V1, y = V2, color = sample), size = 2, alpha = 1) + scale_color_manual(values = c(&quot;#3C88C3&quot;, &quot;#C3773C&quot;)) + ggtitle(&quot;merge&quot;) + cocluster_theme + ylab(&quot;&quot;) + xlab(&quot;&quot;) TN3_cocluster_p_act &lt;- ggplot(TN3_cocluster_umap %&gt;% filter(sample == &quot;ACT&quot;)) + geom_point(aes(x = V1, y = V2, color = sample), size = 2, alpha = 1) + scale_color_manual(values = c(&quot;#C3773C&quot;)) + ggtitle(&quot;ACT&quot;) + cocluster_theme + xlab(&quot;&quot;) TN3_cocluster_p_tenx &lt;- ggplot(TN3_cocluster_umap %&gt;% filter(sample == &quot;10X CNA&quot;)) + geom_point(aes(x = V1, y = V2, color = sample), size = 2, alpha = 1) + scale_color_manual(values = c(&quot;#3C88C3&quot;)) + ggtitle(&quot;10X CNA&quot;) + cocluster_theme + ylab(&quot;&quot;) + xlab(&quot;&quot;) TN3_cocluster_p_cluster &lt;- ggplot(TN3_cocluster_umap) + geom_point(aes(x = V1, y = V2, color = subclones), size = 2, alpha = 1) + scale_color_manual(values = colors_vector$subclones) + cocluster_theme + ggtitle(&quot;co-clustering&quot;) + xlab(&quot;&quot;) + ylab(&quot;&quot;) TN3_cocluster_p &lt;- TN3_cocluster_p_act + TN3_cocluster_p_tenx + TN3_cocluster_p_merge + TN3_cocluster_p_cluster + patchwork::plot_layout(nrow = 1) TN3_cocluster_p 5.4 TN3 Gene Frequency Barplot # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:42 2020 # Tumors Heatmaps/Consensus/Trees # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tue Nov 24 17:13:47 2020 TN3_ploidy &lt;- 3.44 TN3_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN3_popseg_long_ml.rds&quot;)) TN3_10xcnv_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/TN3_10xcnv_popseg_long_ml.rds&quot;)) cn_freq_barplot( act_df = TN3_popseg_long_ml, tenx_df = TN3_10xcnv_popseg_long_ml, keep_genes = c(&quot;BRCA1&quot;, &quot;EGFR&quot;, &quot;MYC&quot;, &quot;RB1&quot;, &quot;CCND1&quot;, &quot;CDKN1B&quot;, &quot;PAK1&quot;, &quot;FHIT&quot;, &quot;FGFR1&quot;, &quot;ESR1&quot;), ploidy_VAL = TN3_ploidy ) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## &#39;select()&#39; returned 1:1 mapping between keys and columns TN3_cocluster_ordered &lt;- order_dataset(popseg_long = TN3_cocluster_popseg_long_ml, clustering = TN3_cocluster_cluster) TN3_cocluster_consensus &lt;- calculate_consensus(df = TN3_cocluster_ordered$dataset_ordered, clusters = TN3_cocluster_ordered$clustering_ordered$subclones) TN3_cocluster_gen_classes &lt;- consensus_genomic_classes(TN3_cocluster_consensus, ploidy_VAL = TN3_ploidy) TN3_cocluster_me_consensus_tree &lt;- run_me_tree(consensus_df = TN3_cocluster_consensus, clusters = TN3_cocluster_cluster, ploidy_VAL = TN3_ploidy, plot = FALSE) TN3_cocluster_annotation_genes &lt;- c(&quot;BRCA1&quot;, &quot;TP53&quot;, &quot;FGFR4&quot;, &quot;MDM2&quot;, &quot;CCND1&quot;, &quot;SHC1&quot;, &quot;CKS1B&quot;, &quot;MYC&quot;, &quot;RB1&quot;, &quot;MTDH&quot;) plot_heatmap(df = TN3_cocluster_ordered$dataset_ordered, ploidy_VAL = TN3_ploidy, ploidy_trunc = 2*(round(TN3_ploidy)), clusters = TN3_cocluster_ordered$clustering_ordered, genomic_classes = TN3_cocluster_gen_classes, keep_gene = TN3_cocluster_annotation_genes, tree_order = TN3_cocluster_me_consensus_tree$cs_tree_order, show_legend = TRUE, cocluster = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. "],
["exome-and-wgd.html", "6 Exome and WGD 6.1 Data 6.2 Filtering 6.3 Mut timer information 6.4 Mutation burden 6.5 Oncomap 6.6 WGD estimation in mutational timing 6.7 WGD estimations in copy number time", " 6 Exome and WGD source(&quot;R/setup.R&quot;) source(&quot;R/vcf_filtering.R&quot;) source(&quot;R/parse_mtimer_vcf.R&quot;) 6.1 Data TN1_mutect &lt;- read.vcfR(here(&quot;extdata/exome/mutect/TN1.vcf&quot;)) ## Scanning file to determine attributes. ## File attributes: ## meta lines: 165 ## header_line: 166 ## variant count: 141 ## column count: 15 ## Meta line 165 read in. ## All meta lines processed. ## gt matrix initialized. ## Character matrix gt created. ## Character matrix gt rows: 141 ## Character matrix gt cols: 15 ## skip: 0 ## nrows: 141 ## row_num: 0 ## Processed variant: 141 ## All variants processed TN1_annovar &lt;- read_delim(here(&quot;extdata/exome/annovar/TN1.annovar.csv&quot;), delim = &quot;,&quot;) %&gt;% dplyr::rename(CHROM = &quot;Chr&quot;, POS = &quot;Start&quot;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## Start = col_double(), ## End = col_double() ## ) ## See spec(...) for full column specifications. TN2_mutect &lt;- read.vcfR(here(&quot;extdata/exome/mutect/TN2.vcf&quot;)) ## Scanning file to determine attributes. ## File attributes: ## meta lines: 165 ## header_line: 166 ## variant count: 96 ## column count: 15 ## Meta line 165 read in. ## All meta lines processed. ## gt matrix initialized. ## Character matrix gt created. ## Character matrix gt rows: 96 ## Character matrix gt cols: 15 ## skip: 0 ## nrows: 96 ## row_num: 0 ## Processed variant: 96 ## All variants processed TN2_annovar &lt;- read_delim(here(&quot;extdata/exome/annovar/TN2.annovar.csv&quot;), delim = &quot;,&quot;) %&gt;% rename(CHROM = &quot;Chr&quot;, POS = &quot;Start&quot;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## Start = col_double(), ## End = col_double() ## ) ## See spec(...) for full column specifications. TN3_mutect &lt;- read.vcfR(here(&quot;extdata/exome/mutect/TN3.vcf&quot;)) ## Scanning file to determine attributes. ## File attributes: ## meta lines: 165 ## header_line: 166 ## variant count: 1057 ## column count: 15 ## Meta line 165 read in. ## All meta lines processed. ## gt matrix initialized. ## Character matrix gt created. ## Character matrix gt rows: 1057 ## Character matrix gt cols: 15 ## skip: 0 ## nrows: 1057 ## row_num: 0 ## Processed variant 1000 Processed variant: 1057 ## All variants processed TN3_annovar &lt;- read_delim(here(&quot;extdata/exome/annovar/TN3.annovar.csv&quot;), delim = &quot;,&quot;) %&gt;% dplyr::rename(CHROM = &quot;Chr&quot;, POS = &quot;Start&quot;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## Start = col_double(), ## End = col_double() ## ) ## See spec(...) for full column specifications. TN4_mutect &lt;- read.vcfR(here(&quot;extdata/exome/mutect/TN4.vcf&quot;)) ## Scanning file to determine attributes. ## File attributes: ## meta lines: 165 ## header_line: 166 ## variant count: 97 ## column count: 15 ## Meta line 165 read in. ## All meta lines processed. ## gt matrix initialized. ## Character matrix gt created. ## Character matrix gt rows: 97 ## Character matrix gt cols: 15 ## skip: 0 ## nrows: 97 ## row_num: 0 ## Processed variant: 97 ## All variants processed TN4_annovar &lt;- read_delim(here(&quot;extdata/exome/annovar/TN4.annovar.csv&quot;), delim = &quot;,&quot;) %&gt;% dplyr::rename(CHROM = &quot;Chr&quot;, POS = &quot;Start&quot;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## Start = col_double(), ## End = col_double() ## ) ## See spec(...) for full column specifications. TN5_mutect &lt;- read.vcfR(here(&quot;extdata/exome/mutect/TN5.vcf&quot;)) ## Scanning file to determine attributes. ## File attributes: ## meta lines: 166 ## header_line: 167 ## variant count: 300 ## column count: 16 ## Meta line 166 read in. ## All meta lines processed. ## gt matrix initialized. ## Character matrix gt created. ## Character matrix gt rows: 300 ## Character matrix gt cols: 16 ## skip: 0 ## nrows: 300 ## row_num: 0 ## Processed variant: 300 ## All variants processed TN5_annovar &lt;- read_delim(here(&quot;extdata/exome/annovar/TN5.annovar.csv&quot;), delim = &quot;,&quot;) %&gt;% dplyr::rename(CHROM = &quot;Chr&quot;, POS = &quot;Start&quot;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## Start = col_double(), ## End = col_double() ## ) ## See spec(...) for full column specifications. TN6_mutect &lt;- read.vcfR(here(&quot;extdata/exome/mutect/TN6.vcf&quot;)) ## Scanning file to determine attributes. ## File attributes: ## meta lines: 166 ## header_line: 167 ## variant count: 291 ## column count: 16 ## Meta line 166 read in. ## All meta lines processed. ## gt matrix initialized. ## Character matrix gt created. ## Character matrix gt rows: 291 ## Character matrix gt cols: 16 ## skip: 0 ## nrows: 291 ## row_num: 0 ## Processed variant: 291 ## All variants processed TN6_annovar &lt;- read_delim(here(&quot;extdata/exome/annovar/TN6.annovar.csv&quot;), delim = &quot;,&quot;) %&gt;% dplyr::rename(CHROM = &quot;Chr&quot;, POS = &quot;Start&quot;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## Start = col_double(), ## End = col_double() ## ) ## See spec(...) for full column specifications. TN7_mutect &lt;- read.vcfR(here(&quot;extdata/exome/mutect/TN7.vcf&quot;)) ## Scanning file to determine attributes. ## File attributes: ## meta lines: 164 ## header_line: 165 ## variant count: 406 ## column count: 14 ## Meta line 164 read in. ## All meta lines processed. ## gt matrix initialized. ## Character matrix gt created. ## Character matrix gt rows: 406 ## Character matrix gt cols: 14 ## skip: 0 ## nrows: 406 ## row_num: 0 ## Processed variant: 406 ## All variants processed TN7_annovar &lt;- read_delim(here(&quot;extdata/exome/annovar/TN7.annovar.csv&quot;), delim = &quot;,&quot;) %&gt;% dplyr::rename(CHROM = &quot;Chr&quot;, POS = &quot;Start&quot;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## Start = col_double(), ## End = col_double() ## ) ## See spec(...) for full column specifications. TN8_mutect &lt;- read.vcfR(here(&quot;extdata/exome/mutect/TN8.vcf&quot;)) ## Scanning file to determine attributes. ## File attributes: ## meta lines: 165 ## header_line: 166 ## variant count: 6592 ## column count: 15 ## Meta line 165 read in. ## All meta lines processed. ## gt matrix initialized. ## Character matrix gt created. ## Character matrix gt rows: 6592 ## Character matrix gt cols: 15 ## skip: 0 ## nrows: 6592 ## row_num: 0 ## Processed variant 1000 Processed variant 2000 Processed variant 3000 Processed variant 4000 Processed variant 5000 Processed variant 6000 Processed variant: 6592 ## All variants processed TN8_annovar &lt;- read_delim(here(&quot;extdata/exome/annovar/TN8.annovar.csv&quot;), delim = &quot;,&quot;) %&gt;% dplyr::rename(CHROM = &quot;Chr&quot;, POS = &quot;Start&quot;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## Start = col_double(), ## End = col_double() ## ) ## See spec(...) for full column specifications. 6.2 Filtering TN1_mutations &lt;- vcf_filtering( mutect = TN1_mutect, annovar = TN1_annovar, min_AD = 1, bulk_normal = &quot;TN28N&quot;, bulk_tumor = &quot;TN28S1A&quot; ) %&gt;% left_join(TN1_annovar) TN2_mutations &lt;- vcf_filtering( mutect = TN2_mutect, annovar = TN2_annovar, min_AD = 1, bulk_normal = &quot;TN20N&quot;, bulk_tumor = &quot;TN20S1A&quot; ) %&gt;% left_join(TN2_annovar) TN3_mutations &lt;- vcf_filtering( mutect = TN3_mutect, annovar = TN3_annovar, min_AD = 1, bulk_normal = &quot;TN17N&quot;, bulk_tumor = &quot;TN17A&quot; ) %&gt;% left_join(TN3_annovar) TN4_mutations &lt;- vcf_filtering( mutect = TN4_mutect, annovar = TN4_annovar, min_AD = 1, bulk_normal = &quot;TN26N&quot;, bulk_tumor = &quot;TN26S2A&quot; ) %&gt;% left_join(TN4_annovar) TN5_mutations &lt;- vcf_filtering( mutect = TN5_mutect, annovar = TN5_annovar, min_AD = 1, bulk_normal = &quot;TN21N&quot;, bulk_tumor = &quot;TN21S1A&quot; ) %&gt;% left_join(TN5_annovar) TN6_mutations &lt;- vcf_filtering( mutect = TN6_mutect, annovar = TN6_annovar, min_AD = 1, bulk_normal = &quot;BRCADN&quot;, bulk_tumor = &quot;BRCADT&quot; ) %&gt;% left_join(TN6_annovar) TN7_mutations &lt;- vcf_filtering( mutect = TN7_mutect, annovar = TN7_annovar, min_AD = 1, bulk_normal = &quot;BRCACN&quot;, bulk_tumor = &quot;BRCACT&quot; ) %&gt;% left_join(TN7_annovar) TN8_mutations &lt;- vcf_filtering( mutect = TN8_mutect, annovar = TN8_annovar, min_AD = 1, bulk_normal = &quot;TN27N&quot;, bulk_tumor = &quot;TN27A&quot; ) %&gt;% left_join(TN8_annovar) # Unique data frame for mutations, excluding matched normal from the vcf TN_muts &lt;- bind_rows( TN1_mutations %&gt;% filter(sample != &quot;TN28N&quot;) %&gt;% mutate(patient = &quot;TN1&quot;), TN2_mutations %&gt;% filter(sample != &quot;TN20N&quot;) %&gt;% mutate(patient = &quot;TN2&quot;), TN3_mutations %&gt;% filter(sample != &quot;TN17N&quot;) %&gt;% mutate(patient = &quot;TN3&quot;), TN4_mutations %&gt;% filter(sample != &quot;TN26N&quot;) %&gt;% mutate(patient = &quot;TN4&quot;), TN5_mutations %&gt;% filter(sample != &quot;TN21N&quot;) %&gt;% mutate(patient = &quot;TN5&quot;), TN6_mutations %&gt;% filter(sample != &quot;BRCADN&quot;) %&gt;% mutate(patient = &quot;TN6&quot;), TN7_mutations %&gt;% filter(sample != &quot;BRCACN&quot;) %&gt;% mutate(patient = &quot;TN7&quot;), TN8_mutations %&gt;% filter(sample != &quot;TN27N&quot;) %&gt;% mutate(patient = &quot;TN8&quot;) ) 6.3 Mut timer information TN1_mut_time &lt;- parse_mtimer_vcf(here(&quot;extdata/exome/mut_timer/TN1_m_timer.vcf&quot;)) %&gt;% mutate(patient = &quot;TN1&quot;) TN2_mut_time &lt;- parse_mtimer_vcf(here(&quot;extdata/exome/mut_timer/TN2_m_timer.vcf&quot;)) %&gt;% mutate(patient = &quot;TN2&quot;) TN3_mut_time &lt;- parse_mtimer_vcf(here(&quot;extdata/exome/mut_timer/TN3_m_timer.vcf&quot;)) %&gt;% mutate(patient = &quot;TN3&quot;) TN4_mut_time &lt;- parse_mtimer_vcf(here(&quot;extdata/exome/mut_timer/TN4_m_timer.vcf&quot;)) %&gt;% mutate(patient = &quot;TN4&quot;) TN5_mut_time &lt;- parse_mtimer_vcf(here(&quot;extdata/exome/mut_timer/TN5_m_timer.vcf&quot;)) %&gt;% mutate(patient = &quot;TN5&quot;) TN6_mut_time &lt;- parse_mtimer_vcf(here(&quot;extdata/exome/mut_timer/TN6_m_timer.vcf&quot;)) %&gt;% mutate(patient = &quot;TN6&quot;) TN7_mut_time &lt;- parse_mtimer_vcf(here(&quot;extdata/exome/mut_timer/TN7_m_timer.vcf&quot;)) %&gt;% mutate(patient = &quot;TN7&quot;) TN8_mut_time &lt;- parse_mtimer_vcf(here(&quot;extdata/exome/mut_timer/TN8_m_timer.vcf&quot;)) %&gt;% mutate(patient = &quot;TN8&quot;) TN_mut_time &lt;- bind_rows( TN1_mut_time, TN2_mut_time, TN3_mut_time, TN4_mut_time, TN5_mut_time, TN6_mut_time, TN7_mut_time, TN8_mut_time ) 6.4 Mutation burden # merging with mutation timer TN_muts_j_time &lt;- left_join(TN_muts, TN_mut_time) %&gt;% filter(sample %in% c(&quot;TN28S1A&quot;, &quot;TN20S1A&quot;, &quot;TN17A&quot;, &quot;TN26S2A&quot;, &quot;TN21S1A&quot;, &quot;BRCADT&quot;, &quot;BRCACT&quot;, &quot;TN27A&quot;)) %&gt;% mutate(indel = case_when(str_length(Alt) &gt; 1 ~ &quot;indel&quot;, TRUE ~ &#39;SNV&#39;)) %&gt;% mutate(mutation_time = case_when(is.na(mutation_time) &amp; str_length(Alt) &gt; 1 ~ &#39;indel&#39;, is.na(mutation_time) &amp; str_length(Alt) == 1 ~ &#39;unclassified&#39;, TRUE ~ mutation_time)) ## Joining, by = c(&quot;CHROM&quot;, &quot;POS&quot;, &quot;patient&quot;) p_mut_burden &lt;- TN_muts_j_time %&gt;% group_by(sample) %&gt;% filter(sample %in% c(&quot;TN28S1A&quot;, &quot;TN20S1A&quot;, &quot;TN17A&quot;, &quot;TN26S2A&quot;, &quot;TN21S1A&quot;, &quot;BRCADT&quot;, &quot;BRCACT&quot;, &quot;TN27A&quot;), mutation_time != &quot;indel&quot;) %&gt;% add_count(patient, name = &quot;mutation_total&quot;) %&gt;% ggplot(aes(fct_reorder(patient, mutation_total), fill = mutation_time)) + geom_bar(color = &#39;black&#39;, width = .7) + scale_fill_manual(values = c(&quot;clonal&quot; = &quot;#625a94&quot;,&quot;subclonal&quot; = &quot;#f57946&quot;,&quot;indel&quot; = &quot;#ecc0a1&quot;, &quot;unclassified&quot; = &quot;#4a3a3b&quot;)) + scale_y_continuous(breaks = scales::pretty_breaks(n = 10), expand = c(0,0)) + theme(axis.text.x = element_text(angle = 90), legend.position = &quot;bottom&quot;) + xlab(&quot;&quot;) + ylab(&quot;exome mutations&quot;) + labs(fill = &quot;&quot;) p_mut_burden_1&lt;- p_mut_burden + coord_cartesian(ylim = c(0, 200)) p_mut_burden_2 &lt;- p_mut_burden + coord_cartesian(ylim = c(1650, 1750)) + scale_y_continuous(breaks = scales::pretty_breaks(n = 5)) + theme(legend.position = &quot;none&quot;, axis.line.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will replace the existing scale. p_mut_burden_break &lt;- p_mut_burden_2/p_mut_burden_1 + plot_layout(heights = c(1,2)) p_mut_burden_break 6.5 Oncomap genes_upset &lt;- TN_muts %&gt;% filter(sample %in% c(&quot;TN28S1A&quot;, &quot;TN20S1A&quot;, &quot;TN17A&quot;, &quot;TN26S2A&quot;, &quot;TN21S1A&quot;, &quot;BRCADT&quot;, &quot;BRCACT&quot;, &quot;TN27A&quot;), ExonicFunc.refGene != &quot;synonymous SNV&quot;, Polyphen2_HDIV_score &gt; 0.85, SIFT_score &lt; 0.05) %&gt;% group_by(patient) %&gt;% ungroup() %&gt;% count(Gene.refGene, sort = T) %&gt;% filter(n &gt; 1) %&gt;% pull(Gene.refGene) oncomap &lt;- TN_muts %&gt;% filter(sample %in% c(&quot;TN28S1A&quot;, &quot;TN20S1A&quot;, &quot;TN17A&quot;, &quot;TN26S2A&quot;, &quot;TN21S1A&quot;, &quot;BRCADT&quot;, &quot;BRCACT&quot;, &quot;TN27A&quot;), ExonicFunc.refGene != &quot;synonymous SNV&quot;) %&gt;% filter(Gene.refGene %in% genes_upset) %&gt;% ggplot(aes(Gene.refGene, patient)) + geom_point(aes(fill = ExonicFunc.refGene), size = 5, shape = 21) + scale_x_discrete(limits = genes_upset) + scale_y_discrete(limits = rev(paste0(&quot;TN&quot;, 1:8))) + scale_fill_manual(values = PNWColors::pnw_palette(&quot;Sunset&quot;, 3)) + theme(axis.text.x = element_text(angle = 90, vjust = .5, hjust = 1)) + labs(x = &quot;gene&quot;, y = &quot;&quot;, fill = &quot;&quot;) oncomap 6.6 WGD estimation in mutational timing # TN5 can&#39;t be confidently estimated and for this reason is excluded wgd_time &lt;- read.table(here(&quot;extdata/exome/timing/wgd_timing_distributions.tsv&quot;), header = T) %&gt;% mutate(Sample_ID = case_when( str_detect(Sample_ID, &quot;TN28&quot;) ~ &quot;TN1&quot;, str_detect(Sample_ID, &quot;TN20&quot;) ~ &quot;TN2&quot;, str_detect(Sample_ID, &quot;TN17&quot;) ~ &quot;TN3&quot;, str_detect(Sample_ID, &quot;TN26&quot;) ~ &quot;TN4&quot;, str_detect(Sample_ID, &quot;TN21&quot;) ~ &quot;TN5&quot;, str_detect(Sample_ID, &quot;TN27&quot;) ~ &quot;TN8&quot;, str_detect(Sample_ID, &quot;pD&quot;) ~ &quot;TN6&quot;, str_detect(Sample_ID, &quot;pC&quot;) ~ &quot;TN7&quot; )) %&gt;% filter(Sample_ID != &quot;TN5&quot;) wgd_time_tidy &lt;- wgd_time %&gt;% gather(key = &quot;bin&quot;, value = &quot;prob&quot;, -Distribution_Name, -Sample_ID) %&gt;% mutate(bin = str_extract(bin, &quot;[0-9].[0-9]+&quot;), bin = as.numeric(bin), ) wgd_plot &lt;- ggplot(wgd_time_tidy) + geom_col(aes(x = bin, y = prob, fill = Sample_ID, color = Sample_ID)) + scale_fill_manual(values = PNWColors::pnw_palette(&quot;Sailboat&quot;, 8)) + scale_color_manual(values = PNWColors::pnw_palette(&quot;Sailboat&quot;, 8)) + facet_wrap(vars(Sample_ID), nrow = 2) + theme_cowplot() + theme(strip.background = element_blank(), legend.position = &quot;none&quot;) + labs(x = &quot;relative mutational time&quot;, y = &quot;WGD probability&quot;, fill = &quot;&quot;, color = &quot;&quot;) wgd_plot 6.7 WGD estimations in copy number time # TN5 can&#39;t be confidently estimated and for this reason is excluded cn_time_wgd &lt;- read.delim(here(&quot;extdata/exome/timing/cn_timing_confidence_intervals.tsv&quot;)) %&gt;% mutate(Sample_ID = case_when( str_detect(Sample_ID, &quot;TN28&quot;) ~ &quot;TN1&quot;, str_detect(Sample_ID, &quot;TN20&quot;) ~ &quot;TN2&quot;, str_detect(Sample_ID, &quot;TN17&quot;) ~ &quot;TN3&quot;, str_detect(Sample_ID, &quot;TN26&quot;) ~ &quot;TN4&quot;, str_detect(Sample_ID, &quot;TN27&quot;) ~ &quot;TN8&quot;, str_detect(Sample_ID, &quot;pD&quot;) ~ &quot;TN6&quot;, str_detect(Sample_ID, &quot;pC&quot;) ~ &quot;TN7&quot; )) %&gt;% filter(Sample_ID != &quot;TN5&quot;) cn_wgd_plot &lt;- cn_time_wgd %&gt;% ggplot(aes(y = Early_Fraction, x = &quot;samp&quot;)) + geom_rect(aes(ymin = 0, ymax = Early_Fraction, xmin = -Inf, xmax = Inf), color = &#39;gray70&#39;, alpha = .4) + geom_point(size = 5) + geom_errorbar(aes(ymin = Early_Fraction_Low_CI, ymax = Early_Fraction_High_CI), width = .3) + geom_text(aes(label = &quot;WGD&quot;), nudge_x = .3) + scale_y_continuous(limits = c(0,1), breaks = scales::pretty_breaks(n = 10), expand = c(0,0)) + facet_wrap(vars(Sample_ID), scales = &quot;free_x&quot;, nrow = 2) + theme(axis.line.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(size = 14, angle = 90, vjust = .5, hjust = 1)) + labs(y = &quot;WGD relative copy number time&quot;) + coord_flip() cn_wgd_plot "],
["cell-lines.html", "7 Cell lines 7.1 MDA-MB-231 7.2 MDA-MB-231-EX1 7.3 MDA-MB-231-EX2 7.4 MDA-MB-453 7.5 MDA-MB-157 7.6 BT20 7.7 Clones barplot", " 7 Cell lines source(&quot;R/setup.R&quot;) source(&quot;R/run_umap.R&quot;) source(&quot;R/run_clustering.R&quot;) source(&quot;R/order_dataset.R&quot;) source(&quot;R/plot_umap.R&quot;) source(&quot;R/calculate_consensus.R&quot;) source(&quot;R/consensus_genomic_classes.R&quot;) source(&quot;R/run_me_tree.R&quot;) source(&quot;R/plot_heatmap.R&quot;) source(&quot;R/plot_consensus_heatmap.R&quot;) # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 14:23:11 2021 # ggplot theme setup # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 14:23:17 2021 my_theme &lt;- list( ggplot2::theme( axis.title.x = element_text(colour = &quot;black&quot;, size = 16), axis.text.x = element_text(size = 14), axis.title.y = element_text(colour = &quot;black&quot;, size = 16), axis.text.y = element_text(size = 14), legend.position = &quot;top&quot;, legend.title = element_blank(), legend.text = element_text(size = 14) ) ) 7.1 MDA-MB-231 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:10 2021 # MDA-MB-231 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:26 2021 mb231_ploidy &lt;- 2.41 mb231_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/mdamb231_popp31_popseg_long_ml.rds&quot;)) mb231_umap &lt;- run_umap(mb231_popseg_long_ml, umap_n_neighbors = 25, seed = 206) ## Constructing UMAP embedding. mb231_clustering &lt;- run_clustering(mb231_umap, k_snn_major = 93, k_snn_minor = 15) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 54 0.06585366 ## c10 15 0.01829268 ## c11 140 0.17073171 ## c2 54 0.06585366 ## c3 164 0.20000000 ## c4 25 0.03048780 ## c5 41 0.05000000 ## c6 19 0.02317073 ## c7 33 0.04024390 ## c8 30 0.03658537 ## c9 245 0.29878049 ## Done. mb231_ordered &lt;- order_dataset(popseg_long = mb231_popseg_long_ml, clustering = mb231_clustering) plot_umap(umap_df = mb231_umap, clustering = mb231_clustering) ## Joining, by = &quot;cells&quot; mb231_consensus &lt;- calculate_consensus(df = mb231_ordered$dataset_ordered, clusters = mb231_ordered$clustering_ordered$subclones) mb231_gen_classes &lt;- consensus_genomic_classes(mb231_consensus, ploidy_VAL = mb231_ploidy) mb231_me_consensus_tree &lt;- run_me_tree(consensus_df = mb231_consensus, clusters = mb231_clustering, ploidy_VAL = mb231_ploidy) mb231_annotation_genes &lt;- c( &quot;SHC1&quot;, &quot;PIK3CA&quot;, &quot;FGFR4&quot;, &quot;CDKN1A&quot;, &quot;EGFR&quot;, &quot;MYC&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;PGR&quot;, &quot;BCL2&quot;, &quot;AURKA&quot;, &quot;AKT3&quot;, &quot;BCAS2&quot;, &quot;FGFR3&quot;, &quot;LIFR&quot;, &quot;MET&quot;, &quot;PDGFRA&quot;, &quot;VEGFC&quot; ) plot_heatmap(df = mb231_ordered$dataset_ordered, ploidy_VAL = mb231_ploidy, ploidy_trunc = 2*(round(mb231_ploidy))+2, clusters = mb231_ordered$clustering_ordered, genomic_classes = mb231_gen_classes, keep_gene = mb231_annotation_genes, tree_order = mb231_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. 7.2 MDA-MB-231-EX1 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:10 2021 # MDA-MB-231-EX1 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:26 2021 mb231ex1_ploidy &lt;- 2.41 mb231ex1_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/mdamb231ex1_popseg_long_ml.rds&quot;)) mb231ex1_umap &lt;- run_umap(mb231ex1_popseg_long_ml, umap_n_neighbors = 25, seed = 206) ## Constructing UMAP embedding. mb231ex1_clustering &lt;- run_clustering(mb231ex1_umap, k_snn_major = 55, k_snn_minor = 15) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 28 0.02814070 ## c10 21 0.02110553 ## c11 82 0.08241206 ## c12 534 0.53668342 ## c2 89 0.08944724 ## c3 18 0.01809045 ## c4 20 0.02010050 ## c5 50 0.05025126 ## c6 36 0.03618090 ## c7 74 0.07437186 ## c8 24 0.02412060 ## c9 19 0.01909548 ## Done. mb231ex1_ordered &lt;- order_dataset(popseg_long = mb231ex1_popseg_long_ml, clustering = mb231ex1_clustering) plot_umap(umap_df = mb231ex1_umap, clustering = mb231ex1_clustering) ## Joining, by = &quot;cells&quot; mb231ex1_consensus &lt;- calculate_consensus(df = mb231ex1_ordered$dataset_ordered, clusters = mb231ex1_ordered$clustering_ordered$subclones) mb231ex1_gen_classes &lt;- consensus_genomic_classes(mb231ex1_consensus, ploidy_VAL = mb231ex1_ploidy) mb231ex1_me_consensus_tree &lt;- run_me_tree(consensus_df = mb231ex1_consensus, clusters = mb231ex1_clustering, ploidy_VAL = mb231ex1_ploidy, rotate_nodes = c(16:23)) mb231ex1_annotation_genes &lt;- c( &quot;SHC1&quot;, &quot;PIK3CA&quot;, &quot;FGFR4&quot;, &quot;EGFR&quot;, &quot;MYC&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;PTEN&quot;, &quot;CCND1&quot;, &quot;BRCA2&quot;, &quot;RB1&quot;, &quot;STARD3&quot;, &quot;PPM1D&quot;, &quot;BCL2&quot;, &quot;CCNE1&quot;, &quot;NCOA3&quot;, &quot;AURKA&quot;) plot_heatmap(df = mb231ex1_ordered$dataset_ordered, ploidy_VAL = mb231ex1_ploidy, ploidy_trunc = 2*(round(mb231ex1_ploidy))+2, clusters = mb231ex1_ordered$clustering_ordered, genomic_classes = mb231ex1_gen_classes, keep_gene = mb231ex1_annotation_genes, tree_order = mb231ex1_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. 7.3 MDA-MB-231-EX2 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:10 2021 # MDA-MB-231-ex2 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:26 2021 mb231ex2_ploidy &lt;- 2.41 mb231ex2_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/mdamb231ex2_popseg_long_ml.rds&quot;)) mb231ex2_umap &lt;- run_umap(mb231ex2_popseg_long_ml, umap_n_neighbors = 25, seed = 206) ## Constructing UMAP embedding. mb231ex2_clustering &lt;- run_clustering(mb231ex2_umap, k_snn_major = 17, k_snn_minor = 15) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 15 0.01672241 ## c2 37 0.04124861 ## c3 46 0.05128205 ## c4 16 0.01783724 ## c5 32 0.03567447 ## c6 552 0.61538462 ## c7 199 0.22185061 ## Done. mb231ex2_ordered &lt;- order_dataset(popseg_long = mb231ex2_popseg_long_ml, clustering = mb231ex2_clustering) plot_umap(umap_df = mb231ex2_umap, clustering = mb231ex2_clustering) ## Joining, by = &quot;cells&quot; mb231ex2_consensus &lt;- calculate_consensus(df = mb231ex2_ordered$dataset_ordered, clusters = mb231ex2_ordered$clustering_ordered$subclones) mb231ex2_gen_classes &lt;- consensus_genomic_classes(mb231ex2_consensus, ploidy_VAL = mb231ex2_ploidy) mb231ex2_me_consensus_tree &lt;- run_me_tree(consensus_df = mb231ex2_consensus, clusters = mb231ex2_clustering, ploidy_VAL = mb231ex2_ploidy) mb231ex2_annotation_genes &lt;- c( &quot;SHC1&quot;, &quot;PIK3CA&quot;, &quot;EGFR&quot;, &quot;MYC&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;CCND1&quot;, &quot;STARD3&quot;, &quot;RPS6KB1&quot;, &quot;PPM1D&quot;, &quot;BCL2&quot;, &quot;NCOA3&quot;, &quot;AURKA&quot;) plot_heatmap(df = mb231ex2_ordered$dataset_ordered, ploidy_VAL = mb231ex2_ploidy, ploidy_trunc = 2*(round(mb231ex2_ploidy))+2, clusters = mb231ex2_ordered$clustering_ordered, genomic_classes = mb231ex2_gen_classes, keep_gene = mb231ex2_annotation_genes, tree_order = mb231ex2_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. 7.4 MDA-MB-453 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:10 2021 # MDA-MB-453 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:26 2021 mb453_ploidy &lt;- 4.17 mb453_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/mb453_popseg_long_ml.rds&quot;)) mb453_umap &lt;- run_umap(mb453_popseg_long_ml, umap_n_neighbors = 25, seed = 206) ## Constructing UMAP embedding. mb453_clustering &lt;- run_clustering(mb453_umap, k_snn_major = 65, k_snn_minor = 15) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 84 0.06666667 ## c10 40 0.03174603 ## c11 82 0.06507937 ## c12 56 0.04444444 ## c13 26 0.02063492 ## c14 35 0.02777778 ## c15 177 0.14047619 ## c16 54 0.04285714 ## c17 193 0.15317460 ## c18 24 0.01904762 ## c19 66 0.05238095 ## c2 108 0.08571429 ## c20 34 0.02698413 ## c3 45 0.03571429 ## c4 57 0.04523810 ## c5 30 0.02380952 ## c6 45 0.03571429 ## c7 49 0.03888889 ## c8 19 0.01507937 ## c9 36 0.02857143 ## Done. mb453_ordered &lt;- order_dataset(popseg_long = mb453_popseg_long_ml, clustering = mb453_clustering) plot_umap(umap_df = mb453_umap, clustering = mb453_clustering) ## Joining, by = &quot;cells&quot; mb453_consensus &lt;- calculate_consensus(df = mb453_ordered$dataset_ordered, clusters = mb453_ordered$clustering_ordered$subclones) mb453_gen_classes &lt;- consensus_genomic_classes(mb453_consensus, ploidy_VAL = mb453_ploidy) mb453_me_consensus_tree &lt;- run_me_tree(consensus_df = mb453_consensus, clusters = mb453_clustering, ploidy_VAL = mb453_ploidy, rotate_nodes = c(21)) mb453_annotation_genes &lt;- c( &quot;SHC1&quot;, &quot;PIK3CA&quot;, &quot;FGFR4&quot;, &quot;CDKN1A&quot;, &quot;EGFR&quot;, &quot;MTDH&quot;, &quot;MYC&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;CCND1&quot;, &quot;PAK1&quot;, &quot;RB1&quot;, &quot;STARD3&quot;, &quot;PPM1D&quot;, &quot;BCL2&quot;, &quot;CCNE1&quot;, &quot;NCOA3&quot;, &quot;AURKA&quot; ) plot_heatmap(df = mb453_ordered$dataset_ordered, ploidy_VAL = mb453_ploidy, ploidy_trunc = 2*(round(mb453_ploidy)), clusters = mb453_ordered$clustering_ordered, genomic_classes = mb453_gen_classes, keep_gene = mb453_annotation_genes, tree_order = mb453_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. 7.5 MDA-MB-157 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:10 2021 # MDA-MB-157 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:26 2021 mb157_ploidy &lt;- 2.55 mb157_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/mb157_popseg_long_ml.rds&quot;)) mb157_umap &lt;- run_umap(mb157_popseg_long_ml, umap_n_neighbors = 25, seed = 206) ## Constructing UMAP embedding. mb157_clustering &lt;- run_clustering(mb157_umap, k_snn_major = 75, k_snn_minor = 15) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 47 0.03884298 ## c10 33 0.02727273 ## c11 59 0.04876033 ## c12 42 0.03471074 ## c13 151 0.12479339 ## c14 69 0.05702479 ## c15 38 0.03140496 ## c16 85 0.07024793 ## c17 17 0.01404959 ## c18 30 0.02479339 ## c19 34 0.02809917 ## c2 26 0.02148760 ## c20 267 0.22066116 ## c3 58 0.04793388 ## c4 68 0.05619835 ## c5 48 0.03966942 ## c6 18 0.01487603 ## c7 21 0.01735537 ## c8 15 0.01239669 ## c9 84 0.06942149 ## Done. mb157_ordered &lt;- order_dataset(popseg_long = mb157_popseg_long_ml, clustering = mb157_clustering) plot_umap(umap_df = mb157_umap, clustering = mb157_clustering) ## Joining, by = &quot;cells&quot; mb157_consensus &lt;- calculate_consensus(df = mb157_ordered$dataset_ordered, clusters = mb157_ordered$clustering_ordered$subclones) mb157_gen_classes &lt;- consensus_genomic_classes(mb157_consensus, ploidy_VAL = mb157_ploidy) mb157_me_consensus_tree &lt;- run_me_tree(consensus_df = mb157_consensus, clusters = mb157_clustering, ploidy_VAL = mb157_ploidy, rotate_nodes = c(29,30)) mb157_annotation_genes &lt;- c( &quot;SHC1&quot;, &quot;PIK3CA&quot;, &quot;FGFR4&quot;, &quot;CDKN1A&quot;, &quot;EGFR&quot;, &quot;MTDH&quot;, &quot;MYC&quot;, &quot;CDKN2A&quot;, &quot;GATA3&quot;, &quot;CCND1&quot;, &quot;PAK1&quot;, &quot;RB1&quot;, &quot;STARD3&quot;, &quot;PPM1D&quot;, &quot;BCL2&quot;, &quot;CCNE1&quot;, &quot;NCOA3&quot;, &quot;AURKA&quot; ) plot_heatmap(df = mb157_ordered$dataset_ordered, ploidy_VAL = mb157_ploidy, ploidy_trunc = 2*(round(mb157_ploidy)), clusters = mb157_ordered$clustering_ordered, genomic_classes = mb157_gen_classes, keep_gene = mb157_annotation_genes, tree_order = mb157_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. 7.6 BT20 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:10 2021 # BT20 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Thu Mar 4 10:00:26 2021 bt20_ploidy &lt;- 2.7 bt20_popseg_long_ml &lt;- readRDS(here(&quot;extdata/merge_levels/bt20_popseg_long_ml.rds&quot;)) bt20_umap &lt;- run_umap(bt20_popseg_long_ml, umap_n_neighbors = 25, seed = 206) ## Constructing UMAP embedding. bt20_clustering &lt;- run_clustering(bt20_umap, k_snn_major = 55, k_snn_minor = 15) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 272 0.22095857 ## c10 35 0.02843217 ## c11 67 0.05442729 ## c12 50 0.04061738 ## c13 169 0.13728676 ## c2 46 0.03736799 ## c3 94 0.07636068 ## c4 28 0.02274574 ## c5 29 0.02355808 ## c6 128 0.10398050 ## c7 48 0.03899269 ## c8 216 0.17546710 ## c9 49 0.03980504 ## Done. bt20_ordered &lt;- order_dataset(popseg_long = bt20_popseg_long_ml, clustering = bt20_clustering) plot_umap(umap_df = bt20_umap, clustering = bt20_clustering) ## Joining, by = &quot;cells&quot; bt20_consensus &lt;- calculate_consensus(df = bt20_ordered$dataset_ordered, clusters = bt20_ordered$clustering_ordered$subclones) bt20_gen_classes &lt;- consensus_genomic_classes(bt20_consensus, ploidy_VAL = bt20_ploidy) bt20_me_consensus_tree &lt;- run_me_tree(consensus_df = bt20_consensus, clusters = bt20_clustering, ploidy_VAL = bt20_ploidy) bt20_annotation_genes &lt;- c( &quot;SHC1&quot;, &quot;PIK3CA&quot;, &quot;FGFR4&quot;, &quot;EGFR&quot;, &quot;MYC&quot;, &quot;GATA3&quot;, &quot;PTEN&quot;, &quot;BCL2&quot;, &quot;CCNE1&quot;, &quot;NCOA3&quot;, &quot;AURKA&quot; ) plot_heatmap(df = bt20_ordered$dataset_ordered, ploidy_VAL = bt20_ploidy, ploidy_trunc = 2*(round(bt20_ploidy)), clusters = bt20_ordered$clustering_ordered, genomic_classes = bt20_gen_classes, keep_gene = bt20_annotation_genes, tree_order = bt20_me_consensus_tree$cs_tree_order, show_legend = TRUE) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: The input is a data frame, convert it to the matrix. 7.7 Clones barplot n_clones_cl &lt;- tibble( sample = rep(c(&quot;MDA231 P&quot;, &quot;MDA231 EX 1&quot;, &quot;MDA231 EX 2&quot;, &quot;MDA453&quot;, &quot;MDA157&quot;, &quot;BT-20&quot;),2), n_clones = c( length(unique(mb231_clustering$superclones)), length(unique(mb231ex1_clustering$superclones)), length(unique(mb231ex2_clustering$superclones)), length(unique(mb453_clustering$superclones)), length(unique(mb157_clustering$superclones)), length(unique(bt20_clustering$superclones)), length(unique(mb231_clustering$subclones)), length(unique(mb231ex1_clustering$subclones)), length(unique(mb231ex2_clustering$subclones)), length(unique(mb453_clustering$subclones)), length(unique(mb157_clustering$subclones)), length(unique(bt20_clustering$subclones)) ), group = c( rep(&quot;superclones&quot;,6), rep(&quot;subclones&quot;, 6) ) ) p_nclones_cl &lt;- n_clones_cl %&gt;% ggplot() + geom_col( aes( x = fct_relevel(sample, c(&quot;MDA231 P&quot;, &quot;MDA231 EX 1&quot;, &quot;MDA231 EX 2&quot;, &quot;MDA453&quot;, &quot;MDA157&quot;, &quot;BT-20&quot;)), y = n_clones, fill = fct_relevel(group, c(&quot;superclones&quot;, &quot;subclones&quot;)) ), position = &quot;dodge&quot; ) + theme_classic() + my_theme + theme(axis.text.x = element_text(angle = 90, vjust = .5, hjust = 1)) + scale_y_continuous( breaks = scales::pretty_breaks(n = 10), limits = c(0, 22), expand = c(0, 0) ) + paletteer::scale_fill_paletteer_d(&quot;yarrr::info&quot;) + xlab(&quot;&quot;) + ylab(&quot;number of clones&quot;) p_nclones_cl "],
["mda-231-dna-rna.html", "8 MDA-231 DNA &amp; RNA 8.1 Co-clustering 8.2 Single-cell + Bulk Heatmap 8.3 Bulk Heatmap 8.4 DNA &amp; RNA 8.5 Moving averages 8.6 DE 8.7 RNA PCA 8.8 FGSEA", " 8 MDA-231 DNA &amp; RNA Transcript abundances for expanded clones triplicates were quantified by Salmon (v.0.14) with GENCODE transcript v30 and options -l A -1 read1 -2 read2 -p 40 â€“validateMappings â€“seqBias â€“gcBias. Quantified transcripts were imported into R with â€˜tximportâ€™ (v 1.14). Expanded clones e7, e39 and e71 had one technical replicate excluded due to poor RNA quality source(&quot;R/setup.R&quot;) source(&quot;R/run_umap.R&quot;) source(&quot;R/run_clustering.R&quot;) source(&quot;R/order_dataset.R&quot;) source(&quot;R/plot_umap.R&quot;) source(&quot;R/calculate_consensus.R&quot;) source(&quot;R/consensus_genomic_classes.R&quot;) source(&quot;R/run_me_tree.R&quot;) source(&quot;R/plot_heatmap.R&quot;) source(&quot;R/plot_moving_averages.R&quot;) # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Sat Mar 6 17:34:47 2021 # RNA # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Sat Mar 6 17:34:51 2021 # reading RNA data dds &lt;- readRDS(here(&quot;extdata/rna/mdamb231_rna_dds.rds&quot;)) # Quality filtering keep &lt;- rowSums(counts(dds) &gt;= 5) &gt;= 3 dds &lt;- dds[keep,] # computation of size factors which normalize for # differences in sequencing depth among samples dds &lt;- estimateSizeFactors(dds) ## using &#39;avgTxLength&#39; from assays(dds), correcting for library size boxplot(log10(counts(dds,normalized=TRUE)+1), las = 2) # variance-stabilizing transformation vsd &lt;- vst(dds) # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Sat Mar 6 17:34:56 2021 # DNA # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Sat Mar 6 17:35:01 2021 mda_ploidy &lt;- 2.41 # data from DNA bulk expanded clones # and from mda-mb-231 single-cell were merged to the same dataframe mdamb231_sc_bulk_cna_popseg &lt;- readRDS(here(&quot;extdata/popseg/mdamb231_sc_bulk_cna_popseg.rds&quot;)) mdamb231_sc_bulk_cna_ml &lt;- readRDS(here(&quot;extdata/merge_levels/mdamb231_sc_bulk_cna_ml.rds&quot;)) 8.1 Co-clustering mdamb231_sc_bulk_umap &lt;- run_umap(mdamb231_sc_bulk_cna_ml, umap_n_neighbors = 25, seed = 5) ## Constructing UMAP embedding. mdamb231_sc_bulk_clustering &lt;- run_clustering(mdamb231_sc_bulk_umap, k_snn_major = 43, k_snn_minor = 14) ## Building SNN graph. ## Running hdbscan. ## cluster n percent ## c1 176 0.19599109 ## c10 203 0.22605791 ## c11 36 0.04008909 ## c12 14 0.01559020 ## c13 197 0.21937639 ## c2 28 0.03118040 ## c3 59 0.06570156 ## c4 52 0.05790646 ## c5 32 0.03563474 ## c6 42 0.04677060 ## c7 20 0.02227171 ## c8 16 0.01781737 ## c9 23 0.02561247 ## Done. mdamb231_sc_bulk_clustering_umap &lt;- left_join(mdamb231_sc_bulk_umap, mdamb231_sc_bulk_clustering, by = c(&quot;cell&quot; = &quot;cells&quot;)) mdamb231_sc_bulk_clustering_umap &lt;- mdamb231_sc_bulk_clustering_umap %&gt;% mutate( type = case_when(str_detect(cell, &quot;gDNA&quot;) ~ &quot;bulk&quot;, TRUE ~ subclones), shape = case_when(str_detect(cell, &quot;gDNA&quot;) ~ 8, TRUE ~ 20), size = case_when(str_detect(cell, &quot;gDNA&quot;) ~ 1.2, TRUE ~ 1), ) p1 &lt;- mdamb231_sc_bulk_clustering_umap %&gt;% arrange(desc(type)) %&gt;% ggplot() + geom_point(aes(V1,V2, color = superclones), size = 6) + geom_point(aes(V1,V2, color = type, shape = shape, size = size), stroke = 1.5) + scale_color_manual(values = c(colors_vector$superclones, colors_vector$subclones, &quot;bulk&quot; = &quot;black&quot;)) + scale_shape_identity() + scale_size_identity() + theme_classic() + theme(axis.title.x=element_text(colour = &quot;gray50&quot;, size = 20), axis.text.x= element_blank(), axis.ticks.x=element_blank(), axis.title.y = element_text(colour = &quot;gray50&quot;, size = 20), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.line = element_blank(), legend.position = &quot;none&quot;, panel.border = element_rect(color = &quot;black&quot;, fill = NA, size = 2), # legend.position = &quot;null&quot; ) + labs(color = &quot;&quot;) + xlab(&quot;umap1&quot;) + ylab(&quot;umap2&quot;) p1 # this setup will be used to plot the heatmap later mda_ordered &lt;- order_dataset(popseg_long = mdamb231_sc_bulk_cna_ml, clustering = mdamb231_sc_bulk_clustering) mda_cocluster_consensus &lt;- calculate_consensus(df = mda_ordered$dataset_ordered, clusters = mda_ordered$clustering_ordered$subclones) mda_cocluster_me_tree &lt;- run_me_tree(consensus_df = mda_cocluster_consensus, clusters = mdamb231_sc_bulk_clustering, ploidy_VAL = mda_ploidy) 8.2 Single-cell + Bulk Heatmap plot_heatmap(df = mda_ordered$dataset_ordered, ploidy_VAL = mda_ploidy, ploidy_trunc = 2*(round(mda_ploidy))+2, clusters = mda_ordered$clustering_ordered, genomic_classes = NULL, keep_gene = NULL, tree_order = mda_cocluster_me_tree$cs_tree_order, show_legend = TRUE, mda_cocluster = TRUE) 8.3 Bulk Heatmap mdamb231_bulk_cna_long &lt;- mda_ordered$dataset_ordered[str_detect(rownames(mda_ordered$dataset_ordered), &quot;gDNA&quot;),] # clustering info mdamb231_bulk_cl_info &lt;- mda_ordered$clustering_ordered %&gt;% filter(str_detect(cells, &quot;gDNA&quot;)) %&gt;% arrange(superclones, subclones) # matching order mdamb231_bulk_ordered &lt;- mdamb231_bulk_cna_long[mdamb231_bulk_cl_info$cells,] plot_heatmap(df = mdamb231_bulk_ordered, ploidy_VAL = mda_ploidy, ploidy_trunc = 2*(round(mda_ploidy))+2, clusters = mdamb231_bulk_cl_info, genomic_classes = NULL, keep_gene = NULL, tree_order = NULL, show_legend = TRUE, mda_cocluster = TRUE) 8.4 DNA &amp; RNA # Biomart grch37 &lt;- useMart( biomart = &quot;ENSEMBL_MART_ENSEMBL&quot;, host = &quot;grch37.ensembl.org&quot;, path = &quot;/biomart/martservice&quot;, dataset = &quot;hsapiens_gene_ensembl&quot; ) # hg19 chromosome positions from http://hgdownload.cse.ucsc.edu/goldenPath/hg19/bigZips/hg19.chrom.sizes hg19_chrom_sizes &lt;- readRDS(here(&quot;extdata/lib/hg19.chrom.sizes.rds&quot;)) # transforming into a named vector and sorting by chrom hg19_chrom_sizes &lt;- hg19_chrom_sizes[1:23,] hg19_chrom_sizes &lt;- deframe(hg19_chrom_sizes) hg19_chrom_sizes &lt;- hg19_chrom_sizes[gtools::mixedsort(names(hg19_chrom_sizes))] # obtaining the position for every ensembl gene id bms &lt;- list() for(i in 1:length(hg19_chrom_sizes)) { chrom &lt;- str_remove(names(hg19_chrom_sizes)[i], &quot;chr&quot;) if (chrom != &quot;X&quot;) chrom &lt;- as.numeric(chrom) length_chrom &lt;- hg19_chrom_sizes[i] bms[[i]] &lt;- getBM( c( &quot;ensembl_gene_id&quot;, &quot;hgnc_symbol&quot;, &quot;start_position&quot;, &quot;end_position&quot; ), filters = c(&quot;chromosome_name&quot;, &quot;start&quot;, &quot;end&quot;), values = list(chrom, 0, length_chrom), mart = grch37 ) bms[[i]] &lt;- bms[[i]] %&gt;% arrange(start_position) names(bms)[[i]] &lt;- names(hg19_chrom_sizes)[i] } bms_df &lt;- bind_rows(bms, .id = &quot;chr&quot;) %&gt;% dplyr::rename(gene = &quot;hgnc_symbol&quot;, gene_id = &quot;ensembl_gene_id&quot;) # obtaining the count matrix of the MDAMB231 bulk RNAseq cnt &lt;- assay(vsd) # gene id clean up rownames(cnt) &lt;- str_extract(rownames(cnt), &quot;[A-Z]+[0-9]+&quot;) # averaging the expression of the RNA triplicates and calculating a zscore cnt_long &lt;- cnt %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(&quot;gene_id&quot;) %&gt;% tidyr::gather(key = &quot;sample&quot;, value = &quot;count&quot;, -gene_id) %&gt;% mutate(sample = str_remove(sample, &quot;[A-C]$&quot;)) cnt_long_avg &lt;- cnt_long %&gt;% group_by(gene_id, sample) %&gt;% summarise(count_avg = mean(count)) %&gt;% ungroup() %&gt;% group_by(gene_id) %&gt;% mutate(z_score = (count_avg-mean(count_avg))/sd(count_avg)) %&gt;% ungroup() # wide df will be used later for moving average cnt_avg &lt;- tidyr::pivot_wider(cnt_long_avg, names_from = sample, values_from = z_score, id_cols = gene_id) cnt_avg &lt;- as.data.frame(cnt_avg) rownames(cnt_avg) &lt;- cnt_avg$gene_id cnt_avg &lt;- cnt_avg %&gt;% dplyr::select(-gene_id) 8.5 Moving averages # adding segments from population segmentation information mdamb231_bulk_cna_id &lt;- mdamb231_sc_bulk_cna_popseg %&gt;% mutate(seg_index = 1:nrow(mdamb231_sc_bulk_cna_popseg)) # clustering information cl_info &lt;- mdamb231_bulk_cl_info %&gt;% mutate(sample =str_remove(cells, &quot;gDNA&quot;), sample = str_extract(sample, &quot;MDAMB231C[0-9]+&quot;)) seg_ids_long &lt;- rep.int(mdamb231_bulk_cna_id$seg_index, mdamb231_sc_bulk_cna_popseg$n.probes) # bulk integer df mdamb231_bulk_cna_long_int &lt;- ploidy_scale(ploidy_VAL = 2.41, df = mdamb231_bulk_ordered) rownames(mdamb231_bulk_cna_long_int) &lt;- str_remove(rownames(mdamb231_bulk_cna_long_int), &quot;gDNA&quot;) %&gt;% str_remove(&quot;_S[0-9]+&quot;) blk_long &lt;- as.data.frame(t(mdamb231_bulk_cna_long_int)) # adding pipeline information blk_long$chr &lt;- bins_in_cna_pipeline$chr[1:nrow(blk_long)] blk_long$start &lt;- bins_in_cna_pipeline$start[1:nrow(blk_long)] blk_long$end &lt;- bins_in_cna_pipeline$end[1:nrow(blk_long)] blk_long$abspos &lt;- bins_in_cna_pipeline$abspos[1:nrow(blk_long)] blk_long$seg_index &lt;- seg_ids_long # creating a long file with a position vector according to the number of rows blk_long_g &lt;- blk_long %&gt;% mutate(pos = 1:nrow(blk_long)) %&gt;% gather(key = &quot;sample&quot;, value = &quot;cn&quot;, -c(chr, start, end, abspos, pos, seg_index)) # obataining gene positions Grange txdb &lt;- Homo.sapiens hg19_genes &lt;- GenomicFeatures::genes(txdb, columns = &quot;SYMBOL&quot;) hg19_genes_df &lt;- as.data.frame(hg19_genes) %&gt;% mutate(SYMBOL = as.character(SYMBOL)) bins_gr &lt;- bins_in_cna_pipeline %&gt;% makeGRangesFromDataFrame(keep.extra.columns = T, ignore.strand = T) olaps &lt;- findOverlaps(hg19_genes, bins_gr) # finding which index (bin in the 200kb pipeline the gene is located) # saving to a data frame mk_df &lt;- tibble(gene = hg19_genes_df$SYMBOL[queryHits(olaps)], pos = subjectHits(olaps)) %&gt;% dplyr::distinct(gene, .keep_all = TRUE) mk_df_j &lt;- inner_join(mk_df, bms_df) # all triplicates in long form cnt_long_trip &lt;- cnt %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(&quot;gene_id&quot;) %&gt;% tidyr::gather(key = &quot;sample_trip&quot;, value = &quot;count&quot;, -gene_id) %&gt;% mutate(sample= str_remove(sample_trip, &quot;[A-C]$&quot;)) cnt_long_all_zc &lt;- cnt_long_trip %&gt;% group_by(gene_id) %&gt;% mutate(z_score = (count-mean(count))/sd(count)) %&gt;% ungroup() cnt_long_gene_trip &lt;- inner_join(cnt_long_all_zc, mk_df_j) cnt_long_gene_trip &lt;- inner_join(cnt_long_gene_trip, cl_info) %&gt;% arrange(chr, start_position) # joining the copy number long data with the gene positions on their respective bins blk_long_gj &lt;- inner_join(blk_long_g, mk_df) # adding the ensembl gene id information and the cluster information blk_long_gj &lt;- inner_join(blk_long_gj, bms_df) %&gt;% arrange(pos) %&gt;% left_join(cl_info) # full dna rna table with counts merged by sample and ensemblgene_id dna_rna &lt;- inner_join(blk_long_gj, cnt_long_avg) # jitter to be able to visualize all the copy number tracks jitter &lt;- seq(-0.14, 0.17, 0.03) cls &lt;- gtools::mixedsort(unique(levels(droplevels(as.factor(blk_long_gj$subclones))))) blk_long_gj_jit &lt;- blk_long_gj %&gt;% mutate(cn = case_when( subclones == cls[1] ~ cn + jitter[1], subclones == cls[2] ~ cn + jitter[2], subclones == cls[3] ~ cn + jitter[3], subclones == cls[4] ~ cn + jitter[4], subclones == cls[5] ~ cn + jitter[5], subclones == cls[6] ~ cn + jitter[6], subclones == cls[7] ~ cn + jitter[7], subclones == cls[8] ~ cn + jitter[8], subclones == cls[9] ~ cn + jitter[9], subclones == cls[10] ~ cn + jitter[10] )) plot_moving_average(chr = &quot;chr19&quot;, genes = c(&quot;SH3GL1&quot;,&quot;PIK3R2&quot;)) plot_moving_average(chr = &quot;chr11&quot;, genes = c(&quot;ATM&quot;,&quot;CBL&quot;)) 8.6 DE samples &lt;- as.data.frame(colData(dds)) %&gt;% mutate(sample_name = str_extract(sample, &quot;MDAMB231C[0-9]+&quot;)) samples_cl &lt;- left_join(samples, cl_info, by = c(&quot;sample_name&quot; = &quot;sample&quot;)) #sanity check samples_cl &lt;- samples_cl[match(samples_cl$sample, colData(dds)$sample),] # removing unused levels colData(dds)$cluster &lt;- droplevels(as.factor(samples_cl$subclones)) design(dds) &lt;- formula(~ cluster) register(BatchtoolsParam(workers = 60), default = TRUE) dds &lt;- DESeq(dds, parallel = TRUE, betaPrior = T) ## using pre-existing normalization factors ## estimating dispersions ## gene-wise dispersion estimates: 60 workers ## mean-dispersion relationship ## final dispersion estimates, MLE betas: 60 workers ## fitting model and testing: 60 workers ## -- replacing outliers and refitting for 7 genes ## -- DESeq argument &#39;minReplicatesForReplace&#39; = 7 ## -- original counts are preserved in counts(dds) ## estimating dispersions ## fitting model and testing resultsNames(dds) ## [1] &quot;Intercept&quot; &quot;clusterc11&quot; &quot;clusterc12&quot; &quot;clusterc13&quot; &quot;clusterc5&quot; &quot;clusterc6&quot; &quot;clusterc8&quot; &quot;clusterc3&quot; ## [9] &quot;clusterc4&quot; &quot;clusterc1&quot; &quot;clusterc2&quot; clusters &lt;- samples_cl %&gt;% droplevels() %&gt;% distinct(subclones) %&gt;% pull() %&gt;% as.character() 8.7 RNA PCA pcaData &lt;- plotPCA(vst(dds), &quot;cluster&quot;, returnData = T) %&gt;% mutate(triplicate = str_extract(name, &quot;C[0-9]+&quot;), triplicate = tolower(triplicate)) %&gt;% mutate(sample = str_extract(name, &quot;MDAMB231C[0-9]+&quot;)) percentVar &lt;- round(100 * attr(pcaData, &quot;percentVar&quot;)) cluster_anno &lt;- mdamb231_sc_bulk_clustering %&gt;% filter(str_detect(cells, &quot;gDNA&quot;)) %&gt;% mutate(sample = str_remove(cells, &quot;gDNA&quot;)) %&gt;% mutate(sample = str_extract(sample, &quot;MDAMB231C[0-9]+&quot;)) pcaData &lt;- pcaData %&gt;% left_join(cluster_anno, by = c(&quot;group&quot; = &quot;subclones&quot;, &quot;sample&quot; = &quot;sample&quot;)) p_pca &lt;- ggplot(pcaData, aes(x = PC1, y = PC2)) + scale_color_manual(values = c(colors_vector$subclones, colors_vector$superclones)) + geom_point(aes(color = fct_relevel(superclones, gtools::mixedsort(unique(as.character(pcaData$superclones))))), size = 8) + geom_point(aes(color = fct_relevel(group, gtools::mixedsort(unique(as.character(pcaData$group))))), size = 3) + xlab(&quot;PC1&quot;) + ylab(&quot;PC2&quot;) + theme_cowplot() + theme(axis.title.x=element_text(size = 16), axis.text.x= element_blank(), axis.ticks.x=element_blank(), axis.title.y = element_text(size = 16), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.line = element_blank(), plot.title = element_text(hjust = 0.5), legend.position = &quot;none&quot;, panel.border = element_rect(color = &quot;black&quot;, fill = NA, size = 2)) + labs(color = &quot;subclone&quot;) 8.8 FGSEA # Thanks to https://stephenturner.github.io/deseq-to-fgsea/ fgseaResTidy &lt;- list() for (x in 1:length(clusters)) { res &lt;- results(dds, contrast = list( paste0(&quot;cluster&quot;, clusters[x]), paste0( &quot;cluster&quot;, clusters[clusters %!in% clusters[x]] ) ), listValues = c(1, -1 / 10)) rownames(res) &lt;- str_replace(rownames(res), &quot;.[0-9]+$&quot;, &quot;&quot;) res$symbol &lt;- mapIds( org.Hs.eg.db, keys = row.names(res), column = &quot;SYMBOL&quot;, keytype = &quot;ENSEMBL&quot;, multiVals = &quot;first&quot; ) res$map &lt;- mapIds( org.Hs.eg.db, keys = row.names(res), column = &quot;MAP&quot;, keytype = &quot;ENSEMBL&quot;, multiVals = &quot;first&quot; ) head(res[order(res$padj), ], 20) res$gene_map &lt;- paste0(res$symbol, &quot; &quot;, &quot;(&quot;, res$map, &quot;)&quot;) res &lt;- drop_na(as.data.frame(res)) res2_de &lt;- res %&gt;% as_tibble() %&gt;% dplyr::select(symbol, stat) %&gt;% na.omit() %&gt;% distinct() %&gt;% group_by(symbol) %&gt;% summarize(stat = mean(stat)) ranks_de &lt;- deframe(res2_de) pathways.hallmark &lt;- gmtPathways( here(&quot;extdata/lib/h.all.v6.2.symbols.gmt&quot;) ) fgseaRes &lt;- fgsea(pathways = pathways.hallmark, stats = ranks_de, nperm = 2000) fgseaResTidy[[x]] &lt;- fgseaRes %&gt;% as_tibble() names(fgseaResTidy)[x] &lt;- clusters[x] } fgseaResTidy_res &lt;- bind_rows(fgseaResTidy, .id = &quot;comparison&quot;) # keeping only the significant pathways in x or more hallmarks sig_path &lt;- fgseaResTidy_res %&gt;% filter(padj &lt; 0.05) %&gt;% group_by(pathway) %&gt;% dplyr::count() %&gt;% arrange(desc(n)) %&gt;% filter(n &gt; 3) %&gt;% pull(pathway) fgseaResTidy_res_f &lt;- fgseaResTidy_res %&gt;% filter(pathway %in% sig_path) %&gt;% mutate(pathway = str_remove(pathway, &quot;HALLMARK_&quot;)) %&gt;% mutate(pathway = str_replace_all(pathway, &quot;_&quot;, &quot; &quot;)) %&gt;% mutate(pathway = str_to_lower(pathway)) %&gt;% mutate(comparison = paste0(&quot;e&quot;, comparison)) fg_cl &lt;- pivot_wider( fgseaResTidy_res_f, names_from = pathway, values_from = NES, id_cols = comparison ) %&gt;% as.data.frame() rownames(fg_cl) &lt;- fg_cl[, 1] fg_cl_hclust &lt;- hclust(dist(fg_cl[, -1], method = &quot;euclidean&quot;), method = &quot;ward.D&quot;) fg_path &lt;- pivot_wider( fgseaResTidy_res_f, names_from = comparison, values_from = NES, id_cols = pathway ) %&gt;% as.data.frame() rownames(fg_path) &lt;- fg_path[, 1] fg_path_hclust &lt;- hclust(dist(fg_path[, -1], method = &quot;euclidean&quot;), method = &quot;ward.D&quot;) # thanks to https://mgrcbioinfo.github.io/my_GSEA_plot/ myGseaPlot &lt;- function(gseaDataFrame, adjPCutoff = 0.05) { # subset data frame using p value cutoff and add status factor toPlot &lt;- subset(gseaDataFrame, padj &lt;= adjPCutoff) %&gt;% mutate(status = case_when(NES &gt; 0 ~ &quot;Up&quot;, NES &lt; 0 ~ &quot;Down&quot;)) %&gt;% mutate(status = factor(status, levels = c(&quot;Up&quot;, &quot;Down&quot;))) # create plot p &lt;- ggplot( data = toPlot, mapping = aes( x = fct_relevel(comparison, rownames(fg_cl)[fg_cl_hclust$order]), y = fct_relevel(pathway, rownames(fg_path)[fg_path_hclust$order]), color = status, shape = status, fill = NES, size = -log10(padj) ) ) + geom_point() + scale_shape_manual(values = c(24, 25)) + scale_fill_gradient2( high = &quot;firebrick3&quot;, low = &quot;deepskyblue3&quot;, mid = &quot;white&quot;, midpoint = 0 ) + scale_color_manual(values = c(Up = &quot;coral3&quot;, Down = &quot;deepskyblue3&quot;)) + ggtitle(paste0(&quot;GSEA&quot;)) + theme_bw() + theme( plot.title = element_text(hjust = 0.5, size = 18), axis.title.x = element_text(size = 16), panel.grid = element_blank(), legend.position = &quot;bottom&quot;, axis.text.x = element_text( angle = 90, hjust = 1, size = 16, vjust = .5 ), axis.text.y = element_text(size = 14) ) + ylab(&quot;&quot;) + xlab(&quot;expanded clusters&quot;) return(p) } hallmarks_plot &lt;- myGseaPlot(gseaDataFrame = fgseaResTidy_res_f, adjPCutoff = 0.05) hallmarks_plot "],
["session-info.html", "9 Session Info 9.1 Dockerfile", " 9 Session Info sessionInfo() ## R version 3.6.2 (2019-12-12) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Red Hat Enterprise Linux ## ## Matrix products: default ## BLAS: /usr/lib64/R/lib/libRblas.so ## LAPACK: /usr/lib64/R/lib/libRlapack.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats4 grid parallel stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] scran_1.14.6 SingleCellExperiment_1.8.0 ## [3] fgsea_1.12.0 Rcpp_1.0.4.6 ## [5] biomaRt_2.42.1 boot_1.3-25 ## [7] janitor_2.0.1 jcolors_0.0.4 ## [9] vcfR_1.12.0 conflicted_1.0.4 ## [11] Homo.sapiens_1.3.1 TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2 ## [13] org.Hs.eg.db_3.10.0 GO.db_3.10.0 ## [15] OrganismDbi_1.28.0 DESeq2_1.26.0 ## [17] SummarizedExperiment_1.16.1 DelayedArray_0.12.3 ## [19] BiocParallel_1.20.1 matrixStats_0.56.0 ## [21] jsonlite_1.7.0 AnnotationHub_2.18.0 ## [23] BiocFileCache_1.10.2 dbplyr_1.4.4 ## [25] GenomicFeatures_1.38.2 AnnotationDbi_1.48.0 ## [27] Biobase_2.46.0 GenomicRanges_1.38.0 ## [29] GenomeInfoDb_1.22.1 IRanges_2.20.2 ## [31] S4Vectors_0.24.4 BiocGenerics_0.32.0 ## [33] tximport_1.14.2 future.apply_1.7.0 ## [35] future_1.21.0 ggtree_2.0.4 ## [37] cowplot_1.0.0 amap_0.8-18 ## [39] ComplexHeatmap_2.2.0 forcats_0.5.0 ## [41] stringr_1.4.0 dplyr_1.0.0 ## [43] purrr_0.3.4 readr_1.3.1 ## [45] tidyr_1.0.2 tibble_3.0.3 ## [47] tidyverse_1.3.0 uwot_0.1.8 ## [49] Matrix_1.2-18 phangorn_2.5.5 ## [51] ape_5.4 ggbeeswarm_0.6.0 ## [53] ggplot2_3.2.1 umap_0.2.5.0 ## [55] patchwork_1.0.0 rstatix_0.6.0 ## [57] here_0.1 paletteer_1.1.0 ## [59] bookdown_0.18 ## ## loaded via a namespace (and not attached): ## [1] rsvd_1.0.3 Hmisc_4.4-1 Rsamtools_2.2.3 ## [4] rprojroot_1.3-2 crayon_1.3.4 MASS_7.3-51.6 ## [7] nlme_3.1-148 backports_1.1.6 reprex_0.3.0 ## [10] rlang_0.4.7 XVector_0.26.0 readxl_1.3.1 ## [13] irlba_2.3.3 limma_3.42.2 scater_1.14.6 ## [16] rjson_0.2.20 bit64_4.0.2 glue_1.4.0 ## [19] geiger_2.0.6.4 vipor_0.4.5 PNWColors_0.1.0 ## [22] base64url_1.4 haven_2.3.1 tidyselect_1.1.0 ## [25] rio_0.5.16 XML_3.99-0.3 packrat_0.5.0 ## [28] GenomicAlignments_1.22.1 xtable_1.8-4 magrittr_1.5 ## [31] evaluate_0.14 cli_2.0.2 zlibbioc_1.32.0 ## [34] dbscan_1.1-5 rstudioapi_0.11 rpart_4.1-15 ## [37] fastmatch_1.1-0 treeio_1.10.0 maps_3.3.0 ## [40] shiny_1.5.0 BiocSingular_1.2.2 xfun_0.16 ## [43] askpass_1.1 clue_0.3-57 cluster_2.1.0 ## [46] clusterGeneration_1.3.4 expm_0.999-5 interactiveDisplayBase_1.24.0 ## [49] subplex_1.6 listenv_0.8.0 Biostrings_2.54.0 ## [52] png_0.1-7 permute_0.9-5 withr_2.2.0 ## [55] bitops_1.0-6 RBGL_1.62.1 cellranger_1.1.0 ## [58] coda_0.19-3 dqrng_0.2.1 pillar_1.4.6 ## [61] GlobalOptions_0.1.1 fs_1.5.0 scatterplot3d_0.3-41 ## [64] GetoptLong_0.1.8 DelayedMatrixStats_1.8.0 vctrs_0.3.2 ## [67] ellipsis_0.3.1 generics_0.0.2 tools_3.6.2 ## [70] foreign_0.8-76 beeswarm_0.2.3 munsell_0.5.0 ## [73] fastmap_1.0.1 compiler_3.6.2 abind_1.4-5 ## [76] httpuv_1.5.4 rtracklayer_1.46.0 rcartocolor_2.0.0 ## [79] scico_1.2.0 animation_2.6 GenomeInfoDbData_1.2.2 ## [82] gridExtra_2.3 edgeR_3.28.1 lattice_0.20-41 ## [85] utf8_1.1.4 later_1.1.0.1 prismatic_0.2.0 ## [88] scales_1.1.1 graph_1.64.0 tidytree_0.3.3 ## [91] carData_3.0-4 genefilter_1.68.0 lazyeval_0.2.2 ## [94] promises_1.1.1 car_3.0-10 latticeExtra_0.6-29 ## [97] brew_1.0-6 reticulate_1.16 checkmate_2.0.0 ## [100] rmarkdown_2.3 openxlsx_4.1.5 statmod_1.4.34 ## [103] dichromat_2.0-0 igraph_1.2.5 survival_3.2-3 ## [106] numDeriv_2016.8-1.1 yaml_2.2.1 plotrix_3.7-8 ## [109] htmltools_0.5.1.1 memoise_1.1.0 locfit_1.5-9.4 ## [112] batchtools_0.9.13 quadprog_1.5-8 memuse_4.1-0 ## [115] viridisLite_0.3.0 digest_0.6.25 assertthat_0.2.1 ## [118] mime_0.9 rappdirs_0.3.1 palr_0.2.0 ## [121] pals_1.6 RSQLite_2.2.0 debugme_1.1.0 ## [124] mapproj_1.2.7 data.table_1.13.0 blob_1.2.1 ## [127] vegan_2.5-6 deSolve_1.28 splines_3.6.2 ## [130] Formula_1.2-3 labeling_0.3 rematch2_2.1.1 ## [133] RCurl_1.98-1.2 broom_0.7.0 hms_0.5.3 ## [136] modelr_0.1.8 colorspace_1.4-1 base64enc_0.1-3 ## [139] BiocManager_1.30.10 mnormt_1.5-6 shape_1.4.4 ## [142] evobiR_1.1 nnet_7.3-14 mvtnorm_1.1-0 ## [145] circlize_0.4.8 fansi_0.4.1 parallelly_1.23.0 ## [148] R6_2.4.1 lifecycle_0.2.0 phytools_0.7-20 ## [151] oompaBase_3.2.9 zip_2.1.0 curl_4.3 ## [154] snakecase_0.11.0 fastcluster_1.1.25 RcppAnnoy_0.0.16 ## [157] pinfsc50_1.2.0 RColorBrewer_1.1-2 htmlwidgets_1.5.1 ## [160] rvest_0.3.6 mgcv_1.8-31 globals_0.14.0 ## [163] openssl_1.4.2 htmlTable_2.0.1 codetools_0.2-16 ## [166] lubridate_1.7.8 gtools_3.8.2 prettyunits_1.1.1 ## [169] RSpectra_0.16-0 gtable_0.3.0 DBI_1.1.0 ## [172] httr_1.4.2 stringi_1.4.6 progress_1.2.2 ## [175] farver_2.0.3 annotate_1.64.0 viridis_0.5.1 ## [178] seqinr_3.6-1 xml2_1.3.2 combinat_0.0-8 ## [181] rvcheck_0.1.8 BiocNeighbors_1.4.2 ade4_1.7-15 ## [184] geneplotter_1.64.0 BiocVersion_3.10.1 bit_1.1-15.2 ## [187] jpeg_0.1-8.1 pkgconfig_2.0.3 knitr_1.29 suppressPackageStartupMessages(library(&quot;containerit&quot;)) my_dockerfile &lt;- containerit::dockerfile(from = utils::sessionInfo(), versioned_libs = TRUE, versioned_packages = TRUE) ## INFO [2021-03-17 19:17:58] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:17:58] Trying to determine system requirements for the package(s) &#39;amap&#39; from sysreqs online DB ## INFO [2021-03-17 19:17:59] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:17:59] Trying to determine system requirements for the package(s) &#39;AnnotationDbi&#39; from sysreqs online DB ## INFO [2021-03-17 19:17:59] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:17:59] Trying to determine system requirements for the package(s) &#39;AnnotationHub&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:00] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:00] Trying to determine system requirements for the package(s) &#39;ape&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:00] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:00] Trying to determine system requirements for the package(s) &#39;Biobase&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:01] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:01] Trying to determine system requirements for the package(s) &#39;BiocFileCache&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:01] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:01] Trying to determine system requirements for the package(s) &#39;BiocGenerics&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:02] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:02] Trying to determine system requirements for the package(s) &#39;BiocParallel&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:02] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:02] Trying to determine system requirements for the package(s) &#39;biomaRt&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:03] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:03] Trying to determine system requirements for the package(s) &#39;bookdown&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:03] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:03] Trying to determine system requirements for the package(s) &#39;boot&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:04] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:04] Trying to determine system requirements for the package(s) &#39;ComplexHeatmap&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:04] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:04] Trying to determine system requirements for the package(s) &#39;conflicted&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:05] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:05] Trying to determine system requirements for the package(s) &#39;cowplot&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:05] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:05] Trying to determine system requirements for the package(s) &#39;dbplyr&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:06] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:06] Trying to determine system requirements for the package(s) &#39;DelayedArray&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:06] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:06] Trying to determine system requirements for the package(s) &#39;DESeq2&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:07] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:07] Trying to determine system requirements for the package(s) &#39;dplyr&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:07] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:07] Trying to determine system requirements for the package(s) &#39;fgsea&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:08] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:08] Trying to determine system requirements for the package(s) &#39;forcats&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:08] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:08] Trying to determine system requirements for the package(s) &#39;future&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:08] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:09] Trying to determine system requirements for the package(s) &#39;future.apply&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:09] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:09] Trying to determine system requirements for the package(s) &#39;GenomeInfoDb&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:10] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:10] Trying to determine system requirements for the package(s) &#39;GenomicFeatures&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:10] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:10] Trying to determine system requirements for the package(s) &#39;GenomicRanges&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:11] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:11] Trying to determine system requirements for the package(s) &#39;ggbeeswarm&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:11] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:11] Trying to determine system requirements for the package(s) &#39;ggplot2&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:12] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:12] Trying to determine system requirements for the package(s) &#39;ggtree&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:12] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:12] Trying to determine system requirements for the package(s) &#39;GO.db&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:13] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:13] Trying to determine system requirements for the package(s) &#39;here&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:14] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:14] Trying to determine system requirements for the package(s) &#39;Homo.sapiens&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:14] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:14] Trying to determine system requirements for the package(s) &#39;IRanges&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:15] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:15] Trying to determine system requirements for the package(s) &#39;janitor&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:15] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:15] Trying to determine system requirements for the package(s) &#39;jcolors&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:16] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:16] Trying to determine system requirements for the package(s) &#39;jsonlite&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:16] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:16] Trying to determine system requirements for the package(s) &#39;Matrix&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:16] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:16] Trying to determine system requirements for the package(s) &#39;matrixStats&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:17] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:17] Trying to determine system requirements for the package(s) &#39;org.Hs.eg.db&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:17] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:17] Trying to determine system requirements for the package(s) &#39;OrganismDbi&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:18] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:18] Trying to determine system requirements for the package(s) &#39;paletteer&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:19] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:19] Trying to determine system requirements for the package(s) &#39;patchwork&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:19] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:19] Trying to determine system requirements for the package(s) &#39;phangorn&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:20] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:20] Trying to determine system requirements for the package(s) &#39;purrr&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:20] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:20] Trying to determine system requirements for the package(s) &#39;Rcpp&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:21] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:21] Trying to determine system requirements for the package(s) &#39;readr&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:21] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:21] Trying to determine system requirements for the package(s) &#39;rstatix&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:21] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:21] Trying to determine system requirements for the package(s) &#39;S4Vectors&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:22] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:22] Trying to determine system requirements for the package(s) &#39;scran&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:22] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:22] Trying to determine system requirements for the package(s) &#39;SingleCellExperiment&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:23] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:23] Trying to determine system requirements for the package(s) &#39;stringr&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:23] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:23] Trying to determine system requirements for the package(s) &#39;SummarizedExperiment&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:24] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:24] Trying to determine system requirements for the package(s) &#39;tibble&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:24] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:24] Trying to determine system requirements for the package(s) &#39;tidyr&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:25] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:25] Trying to determine system requirements for the package(s) &#39;tidyverse&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:25] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:25] Trying to determine system requirements for the package(s) &#39;TxDb.Hsapiens.UCSC.hg19.knownGene&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:26] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:26] Trying to determine system requirements for the package(s) &#39;tximport&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:26] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:26] Trying to determine system requirements for the package(s) &#39;umap&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:27] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:27] Trying to determine system requirements for the package(s) &#39;uwot&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:27] Going online? TRUE ... to retrieve system dependencies (sysreq-api) ## INFO [2021-03-17 19:18:27] Trying to determine system requirements for the package(s) &#39;vcfR&#39; from sysreqs online DB ## INFO [2021-03-17 19:18:28] Versioned packages enabled, installing &#39;versions&#39; ## INFO [2021-03-17 19:18:28] Adding versioned CRAN packages: Rcpp, boot, janitor, jcolors, vcfR, conflicted, matrixStats, jsonlite, dbplyr, future.apply, future, cowplot, amap, forcats, stringr, dplyr, purrr, readr, tidyr, tibble, tidyverse, uwot, Matrix, phangorn, ape, ggbeeswarm, ggplot2, umap, patchwork, rstatix, here, paletteer, bookdown ## WARN [2021-03-17 19:18:28] Adding versioned Bioconductor packages not supported: scran, SingleCellExperiment, fgsea, biomaRt, Homo.sapiens, TxDb.Hsapiens.UCSC.hg19.knownGene, org.Hs.eg.db, GO.db, OrganismDbi, DESeq2, SummarizedExperiment, DelayedArray, BiocParallel, AnnotationHub, BiocFileCache, GenomicFeatures, AnnotationDbi, Biobase, GenomicRanges, GenomeInfoDb, IRanges, S4Vectors, BiocGenerics, tximport, ggtree, ComplexHeatmap ## INFO [2021-03-17 19:18:28] Adding Bioconductor packages: AnnotationDbi, AnnotationHub, Biobase, BiocFileCache, BiocGenerics, BiocParallel, biomaRt, ComplexHeatmap, DelayedArray, DESeq2, fgsea, GenomeInfoDb, GenomicFeatures, GenomicRanges, ggtree, GO.db, Homo.sapiens, IRanges, org.Hs.eg.db, OrganismDbi, S4Vectors, scran, SingleCellExperiment, SummarizedExperiment, TxDb.Hsapiens.UCSC.hg19.knownGene, tximport ## INFO [2021-03-17 19:18:29] Created Dockerfile-Object based on sessionInfo 9.1 Dockerfile print(my_dockerfile) ## FROM rocker/r-ver:3.6.2 ## LABEL maintainer=&quot;dminussi&quot; ## RUN export DEBIAN_FRONTEND=noninteractive; apt-get -y update \\ ## &amp;&amp; apt-get install -y pandoc \\ ## pandoc-citeproc ## RUN [&quot;install2.r&quot;, &quot;versions&quot;] ## RUN [&quot;Rscript&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;Rcpp&#39;, &#39;1.0.4.6&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;boot&#39;, &#39;1.3-25&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;janitor&#39;, &#39;2.0.1&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;jcolors&#39;, &#39;0.0.4&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;vcfR&#39;, &#39;1.12.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;conflicted&#39;, &#39;1.0.4&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;matrixStats&#39;, &#39;0.56.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;jsonlite&#39;, &#39;1.7.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;dbplyr&#39;, &#39;1.4.4&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;future.apply&#39;, &#39;1.7.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;future&#39;, &#39;1.21.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;cowplot&#39;, &#39;1.0.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;amap&#39;, &#39;0.8-18&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;forcats&#39;, &#39;0.5.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;stringr&#39;, &#39;1.4.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;dplyr&#39;, &#39;1.0.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;purrr&#39;, &#39;0.3.4&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;readr&#39;, &#39;1.3.1&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;tidyr&#39;, &#39;1.0.2&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;tibble&#39;, &#39;3.0.3&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;tidyverse&#39;, &#39;1.3.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;uwot&#39;, &#39;0.1.8&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;Matrix&#39;, &#39;1.2-18&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;phangorn&#39;, &#39;2.5.5&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;ape&#39;, &#39;5.4&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;ggbeeswarm&#39;, &#39;0.6.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;ggplot2&#39;, &#39;3.2.1&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;umap&#39;, &#39;0.2.5.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;patchwork&#39;, &#39;1.0.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;rstatix&#39;, &#39;0.6.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;here&#39;, &#39;0.1&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;paletteer&#39;, &#39;1.1.0&#39;)&quot;, &quot;-e&quot;, &quot;versions::install.versions(&#39;bookdown&#39;, &#39;0.18&#39;)&quot;] ## RUN [&quot;install2.r&quot;, &quot;-r https://bioconductor.org/packages/3.10/bioc -r https://bioconductor.org/packages/3.10/data/annotation -r https://bioconductor.org/packages/3.10/data/experiment -r https://bioconductor.org/packages/3.10/workflows&quot;, &quot;AnnotationDbi&quot;, &quot;AnnotationHub&quot;, &quot;Biobase&quot;, &quot;BiocFileCache&quot;, &quot;BiocGenerics&quot;, &quot;BiocParallel&quot;, &quot;biomaRt&quot;, &quot;ComplexHeatmap&quot;, &quot;DelayedArray&quot;, &quot;DESeq2&quot;, &quot;fgsea&quot;, &quot;GenomeInfoDb&quot;, &quot;GenomicFeatures&quot;, &quot;GenomicRanges&quot;, &quot;ggtree&quot;, &quot;GO.db&quot;, &quot;Homo.sapiens&quot;, &quot;IRanges&quot;, &quot;org.Hs.eg.db&quot;, &quot;OrganismDbi&quot;, &quot;S4Vectors&quot;, &quot;scran&quot;, &quot;SingleCellExperiment&quot;, &quot;SummarizedExperiment&quot;, &quot;TxDb.Hsapiens.UCSC.hg19.knownGene&quot;, &quot;tximport&quot;] ## WORKDIR /payload/ ## CMD [&quot;R&quot;] This repository contains the scripts used for in the manuscript: Breast Tumors Maintain a Reservoir of Subclonal Diversity During Primary Expansion "],
["instructions-1.html", "10 Instructions", " 10 Instructions Scripts are provided in the format of a package to reproduce paper figures. Bincounts and segmented cells dataset are available in extdata/. Scripts are available in the folder R. "]
]
