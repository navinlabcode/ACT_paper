[
["technical-properties.html", "2 Technical properties 2.1 Breadth of coverage 2.2 Overdispersion", " 2 Technical properties 2.1 Breadth of coverage Code to generate *.covhist files. covhist files are included in the extdata/covhist/ directory. For ACT, 100 cells were sampled from each dataset. &gt; headers_commands.sh &gt; reads_commands.sh &gt; delete_commands.sh &gt; sort_commands.sh &gt; genomecoveragebed_commands.sh &gt; mark_duplicates_commands.sh for INBAM in /PATH/TO/BAM/FILES/*.sort.bam do INFILEBASE=`basename $INBAM` INSAMPLEBASE=${INFILEBASE%.sort.bam} COVHISTFILE=${INSAMPLEBASE}.covhist.txt OUTBAM=$INSAMPLEBASE.sorted.bam INSAMPLEBASE_MD=`basename -s .sort.bam $INFILEBASE` OUTBAM_MD=$INSAMPLEBASE # marking duplicates touch $OUTBAM.txt printf &quot;%s\\n&quot; &quot;java -XX:ParallelGCThreads=4 -Xmx150g -jar picard.jar MarkDuplicates I=$INFILEBASE O=$OUTBAM_MD.marked.sort.bam M=$OUTBAM_MD.marked.sort.bam.txt VALIDATION_STRINGENCY=SILENT AS=true REMOVE_DUPLICATES=true MAX_RECORDS_IN_RAM=10000000 TMP_DIR=tmp&quot; &gt;&gt; mark_duplicates_commands.sh # Downsampling # Save headers, which will not be included when downsampling printf &quot;%s\\n&quot; &quot;samtools view $INSAMPLEBASE.marked.sort.bam -H &gt; $INSAMPLEBASE.sam&quot; &gt;&gt; headers_commands.sh # Downsample by randomly selecting a subset of rows besides the header, and # appending them to the header # Use the file itself as the seed for the random number generator printf &quot;%s\\n&quot; &quot;samtools view $INSAMPLEBASE.marked.sort.bam | shuf -n 800000 --random-source=$INSAMPLEBASE.marked.sort.bam &gt;&gt; $INSAMPLEBASE.sam&quot; &gt;&gt; reads_commands.sh # Sort the downsampled SAM file printf &quot;%s\\n&quot; &quot;samtools sort -o $OUTBAM $INSAMPLEBASE.sam&quot; &gt;&gt; sort_commands.sh # Delete the unsorted SAM files printf &quot;%s\\n&quot; &quot;rm $INSAMPLEBASE.sam&quot; &gt;&gt; delete_commands.sh # Calculate coverage printf &quot;genomeCoverageBed -ibam $OUTBAM -fs 50 -g genomes/human.hg19.genome &gt; $COVHISTFILE\\n&quot; &gt;&gt; genomecoveragebed_commands.sh done parallel --jobs 30 &lt; mark_duplicates_commands.sh parallel --jobs 70 &lt; headers_commands.sh parallel --jobs 70 &lt; reads_commands.sh parallel --jobs 70 &lt; sort_commands.sh parallel --jobs 70 &lt; delete_commands.sh parallel --jobs 70 &lt; genomecoveragebed_commands.sh tn1_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN1/&quot;)) %&gt;% mutate(sample = &quot;TN1&quot;, tech = &quot;ACT&quot;) tn2_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN2/&quot;)) %&gt;% mutate(sample = &quot;TN2&quot;, tech = &quot;ACT&quot;) tn3_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN3/&quot;)) %&gt;% mutate(sample = &quot;TN3&quot;, tech = &quot;ACT&quot;) tn4_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN4/&quot;)) %&gt;% mutate(sample = &quot;TN4&quot;, tech = &quot;ACT&quot;) tn1_10xcnv_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN1_10XCNA/&quot;)) %&gt;% mutate(sample = &quot;TN1&quot;, tech = &quot;10X CNA&quot;) tn3_10xcnv_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/TN3_10XCNA/&quot;)) %&gt;% mutate(sample = &quot;TN3&quot;, tech = &quot;10X CNA&quot;) t2_doppcr_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/T2_DOPPCR//&quot;)) %&gt;% mutate(sample = &quot;T2&quot;, tech = &quot;DOP-PCR&quot;) t4_doppcr_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/T4_DOPPCR/&quot;)) %&gt;% mutate(sample = &quot;T4&quot;, tech = &quot;DOP-PCR&quot;) t8_doppcr_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/T8_DOPPCR/&quot;)) %&gt;% mutate(sample = &quot;T8&quot;, tech = &quot;DOP-PCR&quot;) t10_doppcr_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/T10_DOPPCR/&quot;)) %&gt;% mutate(sample = &quot;T10&quot;, tech = &quot;DOP-PCR&quot;) dlp_htert_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/DLP_htert/&quot;)) %&gt;% mutate(sample = &quot;hTERT&quot;, tech = &quot;DLP&quot;) dlp_xeno_cov &lt;- calc_coverage(path = here(&quot;extdata/covhist/DLP_xeno/&quot;)) %&gt;% mutate(sample = &quot;Xeno&quot;, tech = &quot;DLP&quot;) # bincounts TN1_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN1_bincounts.rds&quot;)) TN2_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN2_bincounts.rds&quot;)) TN3_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN3_bincounts.rds&quot;)) TN4_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN4_bincounts.rds&quot;)) TN1_10XCNA_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN1_10XCNA_bincounts.rds&quot;)) TN3_10XCNA_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/TN3_10XCNA_bincounts.rds&quot;)) DLP_xeno_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/DLP_xeno_bincounts.rds&quot;)) DLP_htert_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/DLP_htert_bincounts.rds&quot;)) T2_DOPPCR_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/T2_DOPPCR_bincounts.rds&quot;)) T4_DOPPCR_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/T4_DOPPCR_bincounts.rds&quot;)) T8_DOPPCR_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/T8_DOPPCR_bincounts.rds&quot;)) T10_DOPPCR_bincounts &lt;- readRDS(here(&quot;extdata/bincounts/T10_DOPPCR_bincounts.rds&quot;)) all_cov &lt;- rbind(tn2_cov, tn1_cov, tn1_10xcnv_cov, tn4_cov, t2_doppcr_cov, t4_doppcr_cov, tn3_cov, tn3_10xcnv_cov, t8_doppcr_cov, t10_doppcr_cov, dlp_htert_cov, dlp_xeno_cov) p_breadth &lt;- all_cov %&gt;% mutate(tech = as.factor(tech)) %&gt;% mutate(sample = as.factor(sample)) %&gt;% mutate(sample = fct_relevel(sample, gtools::mixedsort(unique(all_cov$sample)))) %&gt;% mutate(tech = fct_relevel(tech, c(&quot;ACT&quot;, &quot;10X CNA&quot;,&quot;DLP&quot;, &quot;DOP-PCR&quot;))) %&gt;% ggplot() + geom_quasirandom(aes(x = sample, y = breadth, color = tech)) + scale_color_paletteer_d(&quot;nord::lumina&quot;) + theme_cowplot() + facet_wrap(vars(tech), nrow = 1, scales = &quot;free_x&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = .5, hjust = 1), strip.background = element_rect(fill = &quot;white&quot;), legend.position = &quot;none&quot;) p_breadth p_breadth_tech &lt;- ggplot(all_cov) + geom_quasirandom(aes( fct_relevel(tech, c(&quot;ACT&quot;, &quot;10X CNA&quot;, &quot;DLP&quot;,&quot;DOP-PCR&quot;)), y = breadth, color = tech)) + theme_cowplot() + scale_color_paletteer_d(&quot;nord::lumina&quot;) + scale_y_continuous(limits = c(0.0108, 0.0127), labels = scales::label_number(digits = 3)) + xlab(&quot;&quot;) + theme_cowplot() + theme(legend.position = &quot;none&quot;) p_breadth_tech all_cov %&gt;% ungroup() %&gt;% kruskal_test(breadth ~ tech) ## # A tibble: 1 x 6 ## .y. n statistic df p method ## * &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 breadth 662 537. 3 4.06e-116 Kruskal-Wallis all_cov %&gt;% ungroup() %&gt;% dunn_test(breadth ~ tech) ## # A tibble: 6 x 9 ## .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 breadth 10X CNA ACT 200 100 6.98 2.97e-12 5.95e-12 **** ## 2 breadth 10X CNA DLP 200 228 -11.3 2.10e-29 6.29e-29 **** ## 3 breadth 10X CNA DOP-PCR 200 134 -16.3 1.24e-59 6.18e-59 **** ## 4 breadth ACT DLP 100 228 -16.2 3.62e-59 1.45e-58 **** ## 5 breadth ACT DOP-PCR 100 134 -20.2 5.71e-91 3.43e-90 **** ## 6 breadth DLP DOP-PCR 228 134 -6.68 2.35e-11 2.35e-11 **** 2.2 Overdispersion TN1_overdispersion &lt;- map_dfr(TN1_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN1&quot;, tech = &quot;ACT&quot;, cells = names(TN1_bincounts)[-c(1:3)]) %&gt;% dplyr::rename(iod = &quot;V1&quot;) TN2_overdispersion &lt;- map_dfr(TN2_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN2&quot;, tech = &quot;ACT&quot;, cells = names(TN2_bincounts)[-c(1:3)]) %&gt;% dplyr::rename(iod = &quot;V1&quot;) TN3_overdispersion &lt;- map_dfr(TN3_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN3&quot;, tech = &quot;ACT&quot;, cells = names(TN3_bincounts)[-c(1:3)]) %&gt;% dplyr::rename(iod = &quot;V1&quot;) TN4_overdispersion &lt;- map_dfr(TN4_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN4&quot;, tech = &quot;ACT&quot;, cells = names(TN4_bincounts)[-c(1:3)]) %&gt;% dplyr::rename(iod = &quot;V1&quot;) #10X CNA names(TN1_10XCNA_bincounts) &lt;- str_replace(names(TN1_10XCNA_bincounts), &quot;\\\\.&quot;, &quot;-&quot;) TN1_10XCNA_overdispersion &lt;- map_dfr(TN1_10XCNA_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN1&quot;, tech = &quot;10X CNA&quot;, cells = names(TN1_10XCNA_bincounts)[-c(1:3)]) %&gt;% dplyr::rename(iod = &quot;V1&quot;) names(TN3_10XCNA_bincounts) &lt;- str_replace(names(TN3_10XCNA_bincounts), &quot;\\\\.&quot;, &quot;-&quot;) TN3_10XCNA_overdispersion &lt;- map_dfr(TN3_10XCNA_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;TN3&quot;, tech = &quot;10X CNA&quot;, cells = names(TN3_10XCNA_bincounts)[-c(1:3)]) %&gt;% dplyr::rename(iod = &quot;V1&quot;) # DLP DLP_xeno_overdispersion &lt;- map_dfr(DLP_xeno_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;Xeno&quot;, tech = &quot;DLP&quot;, cells = names(DLP_xeno_bincounts)[-c(1:3)]) %&gt;% dplyr::rename(iod = &quot;V1&quot;) DLP_htert_overdispersion &lt;- map_dfr(DLP_htert_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;hTERT&quot;, tech = &quot;DLP&quot;, cells = names(DLP_htert_bincounts)[-c(1:3)]) %&gt;% dplyr::rename(iod = &quot;V1&quot;) #DOP-PCR T2_DOPPCR_overdispersion &lt;- map_dfr(T2_DOPPCR_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;T2&quot;, tech = &quot;DOP-PCR&quot;, cells = toupper(names(T2_DOPPCR_bincounts)[-c(1:3)])) %&gt;% dplyr::rename(iod = &quot;V1&quot;) T4_DOPPCR_overdispersion &lt;- map_dfr(T4_DOPPCR_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;T4&quot;, tech = &quot;DOP-PCR&quot;, cells = toupper(names(T4_DOPPCR_bincounts)[-c(1:3)])) %&gt;% dplyr::rename(iod = &quot;V1&quot;) T8_DOPPCR_overdispersion &lt;- map_dfr(T8_DOPPCR_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;T8&quot;, tech = &quot;DOP-PCR&quot;, cells = toupper(names(T8_DOPPCR_bincounts)[-c(1:3)])) %&gt;% dplyr::rename(iod = &quot;V1&quot;) T10_DOPPCR_overdispersion &lt;- map_dfr(T10_DOPPCR_bincounts[,-c(1:3)], overdispersion) %&gt;% t() %&gt;% as.data.frame() %&gt;% mutate(sample = &quot;T10&quot;, tech = &quot;DOP-PCR&quot;, cells = toupper(names(T10_DOPPCR_bincounts)[-c(1:3)])) %&gt;% dplyr::rename(iod = &quot;V1&quot;) all_overdispersion &lt;- bind_rows( TN1_overdispersion, TN2_overdispersion, TN3_overdispersion, TN4_overdispersion, T2_DOPPCR_overdispersion, T4_DOPPCR_overdispersion, T8_DOPPCR_overdispersion, T10_DOPPCR_overdispersion, DLP_htert_overdispersion, DLP_xeno_overdispersion, TN1_10XCNA_overdispersion, TN3_10XCNA_overdispersion ) # subsetting same cells sampled during the BAM file sampling for coverage breadth all_overdispersion &lt;- all_overdispersion %&gt;% filter(cells %in% all_cov$cellname) p_iod &lt;- all_overdispersion %&gt;% mutate(tech = as.factor(tech)) %&gt;% mutate(sample = as.factor(sample)) %&gt;% mutate(sample = fct_relevel(sample, gtools::mixedsort(unique(all_cov$sample)))) %&gt;% mutate(tech = fct_relevel(tech, c(&quot;ACT&quot;, &quot;10X CNA&quot;, &quot;DLP&quot;, &quot;DOP-PCR&quot;))) %&gt;% ggplot() + ggbeeswarm::geom_quasirandom(aes(x = sample, y = iod, color = tech)) + scale_color_manual(values = paletteer_d(&quot;nord::lumina&quot;)) + facet_wrap(vars(tech), nrow = 1, scales = &quot;free_x&quot;) + scale_y_continuous(breaks = scales::pretty_breaks(n=10)) + theme_cowplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = &quot;none&quot;, strip.background = element_rect(fill = &quot;white&quot;)) + ylab(&quot;overdispersion&quot;) + xlab(&quot;&quot;) p_iod p_iod_tech &lt;- all_overdispersion %&gt;% ggplot(aes(x = fct_relevel(tech, c(&quot;ACT&quot;, &quot;10X CNA&quot;, &quot;DLP&quot;,&quot;DOP-PCR&quot;)), y = iod)) + ggbeeswarm::geom_quasirandom(aes(color = tech)) + scale_y_continuous(breaks = scales::pretty_breaks(n=5)) + scale_color_paletteer_d(&quot;nord::lumina&quot;) + theme_cowplot() + xlab(&quot;&quot;) + ylab(&quot;overdispersion&quot;) + theme(legend.position = &quot;none&quot;) p_iod_tech "]
]
